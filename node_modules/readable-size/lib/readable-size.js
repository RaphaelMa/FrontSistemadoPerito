'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

var defaults = {
    separator: {
        thousands: ',',
        decimal: '.'
    },
    output: 'string',
    format: '{{size}} {{unit}}'
};

var readableSize = function readableSize(value, options) {
    var _options = _extends({}, options),
        _options$separator = _options.separator,
        separator = _options$separator === undefined ? false : _options$separator,
        _options$format = _options.format,
        format = _options$format === undefined ? defaults.format : _options$format,
        _options$output = _options.output,
        output = _options$output === undefined ? defaults.output : _options$output;

    if (!Number.isInteger(value)) {
        throw new TypeError('"value" must be an integer: ' + value);
    }

    if (value > Number.MAX_SAFE_INTEGER) {
        // The largest exact integral value is 2^53 - 1, or 9007199254740991.
        // In ES6, this is defined as Number.MAX_SAFE_INTEGER.
        throw new Error('"value" exceeds the integer range (' + Number.MAX_SAFE_INTEGER + '): ' + value);
    }

    if (value < 0) {
        throw new TypeError('"value" is invalid: ' + value);
    }

    var size = String(value);
    var unit = units[0];

    if (value >= 1024) {
        var u = Math.floor(Math.log(value) / Math.log(1024));
        if (u >= units.length) {
            u = units.length - 1;
        }

        size = value / Math.pow(1024, u);
        if (u + 1 < units.length && size >= 1000) {
            size /= 1024;
            ++u;
        }

        if (size >= 100 || u === 0) {
            size = String((Math.floor(size * 1) / 1).toFixed(0));
        } else if (size >= 10) {
            size = String((Math.floor(size * 10) / 10).toFixed(1));
        } else {
            size = String((Math.floor(size * 100) / 100).toFixed(2));
        }

        unit = units[u];
    }

    if ((typeof separator === 'undefined' ? 'undefined' : _typeof(separator)) === 'object' || separator === true) {
        var _separator = _extends({}, separator),
            _separator$thousands = _separator.thousands,
            thousands = _separator$thousands === undefined ? defaults.separator.thousands : _separator$thousands,
            _separator$decimal = _separator.decimal,
            decimal = _separator$decimal === undefined ? defaults.separator.decimal : _separator$decimal;

        var parts = size.split(defaults.separator.decimal);

        if (thousands && parts[0] && parts[0].length > 3) {
            parts[0] = parts[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, thousands);
        }
        if (decimal) {
            size = parts.join(decimal);
        } else {
            size = parts.join(defaults.separator.decimal);
        }
    }

    if (typeof output === 'function') {
        return output({ size: size, unit: unit });
    }

    if (output === 'array') {
        return [size, unit];
    }

    if (output === 'object') {
        return { size: size, unit: unit };
    }

    return String(format).replace('{{size}}', size).replace('{{unit}}', unit);
};

exports.default = readableSize;