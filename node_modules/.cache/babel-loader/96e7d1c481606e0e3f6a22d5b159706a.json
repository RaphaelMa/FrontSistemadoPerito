{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Tasks/List/List.tsx\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport useGetTasks from './useGetTasks';\nimport messageError from 'Utils/messageError';\nimport Header from '../Kanban/Header';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport Table from './Table';\nimport TaskModal from 'Components/Modals/TaskModal/TaskModal';\nimport TaskColumnModal from 'Components/Modals/TaskColumn/TaskColumnModal';\nimport useDestroyTask from 'Components/Modals/TaskModal/useDestroyTask';\nimport { cloneDeep } from 'lodash';\nimport useExportData from './useExportData';\n\nconst List = () => {\n  const taskModalRef = useRef(null);\n  const taskColumnModalRef = useRef(null);\n  const [{\n    loading\n  }, getTasks] = useGetTasks();\n  const [deleteTask] = useDestroyTask();\n  const [tasks, setTasks] = useState([]);\n  const [filters, setFilters] = useState({});\n\n  const fetchData = async () => {\n    try {\n      const {\n        data\n      } = await getTasks();\n      setTasks(data.task || []);\n    } catch (e) {\n      messageError('202102271547');\n    }\n  };\n\n  useEffect(() => {\n    fetchData(); // eslint-disable-next-line\n  }, []);\n\n  const destroyTask = async id => {\n    try {\n      const {\n        data\n      } = await deleteTask(id);\n      const {\n        success\n      } = data || {};\n      if (success) fetchData();\n    } catch (error) {\n      messageError('202106042250');\n    }\n  };\n\n  const updateTaskFinished = task => {\n    setTasks(old_tasks => {\n      const index = old_tasks.findIndex(t => t._id === task._id);\n      const new_tasks = cloneDeep(old_tasks);\n      new_tasks[index] = task;\n      return new_tasks;\n    });\n  };\n\n  const filtered_data = useMemo(() => {\n    const filtered_tasks = tasks.filter(task => {\n      if (filters.start_date && moment(task.deliveryDate, 'YYYY-MM-DD').isBefore(filters.start_date)) return false;\n      if (filters.end_date && moment(task.deliveryDate, 'YYYY-MM-DD').isAfter(filters.end_date)) return false;\n      if (filters.finished !== undefined && filters.finished !== task.finished) return false;\n      if (filters.process_id && filters.process_id !== task.process_id) return false;\n      if (filters.column_id && filters.column_id !== task.column_id) return false;\n      if (filters.user_id && filters.user_id !== task.user_id) return false;\n      return true;\n    });\n    return filtered_tasks;\n  }, [filters, tasks]);\n  const exportToXLS = useExportData(filtered_data);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    setFilters: setFilters,\n    type: \"list\",\n    openTaskModal: () => {\n      var _taskModalRef$current;\n\n      return (_taskModalRef$current = taskModalRef.current) === null || _taskModalRef$current === void 0 ? void 0 : _taskModalRef$current.open();\n    },\n    openColumnModal: () => {\n      var _taskColumnModalRef$c;\n\n      return (_taskColumnModalRef$c = taskColumnModalRef.current) === null || _taskColumnModalRef$c === void 0 ? void 0 : _taskColumnModalRef$c.open();\n    },\n    exportToXLS: exportToXLS,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Table, {\n    loading: loading,\n    tasks: filtered_data,\n    handleDelete: destroyTask,\n    handleEdit: id => {\n      var _taskModalRef$current2;\n\n      return (_taskModalRef$current2 = taskModalRef.current) === null || _taskModalRef$current2 === void 0 ? void 0 : _taskModalRef$current2.open(id);\n    },\n    updateTaskFinished: updateTaskFinished,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TaskModal, {\n    ref: taskModalRef,\n    afterSave: () => fetchData(),\n    afterDeleteTask: () => fetchData(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TaskColumnModal, {\n    ref: taskColumnModalRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }));\n};\n\n__signature__(List, \"useRef{taskModalRef}\\nuseRef{taskColumnModalRef}\\nuseGetTasks{[{ loading }, getTasks]}\\nuseDestroyTask{[deleteTask]}\\nuseState{[tasks, setTasks]([])}\\nuseState{[filters, setFilters]({})}\\nuseEffect{}\\nuseMemo{filtered_data}\\nuseExportData{exportToXLS}\", () => [useGetTasks, useDestroyTask, useExportData]);\n\nList.displayName = \"List\";\nconst _default = List;\nexport default _default;\nconst Container = styled.div.withConfig({\n  displayName: \"List__Container\",\n  componentId: \"sc-1cv0yev-0\"\n})([\"height:calc(100vh - 5rem);padding:0 2rem 2rem 0;\"]);\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(List, \"List\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Tasks/List/List.tsx\");\n  reactHotLoader.register(Container, \"Container\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Tasks/List/List.tsx\");\n  reactHotLoader.register(_default, \"default\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Tasks/List/List.tsx\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Tasks/List/List.tsx"],"names":["React","useEffect","useMemo","useRef","useState","useGetTasks","messageError","Header","styled","moment","Table","TaskModal","TaskColumnModal","useDestroyTask","cloneDeep","useExportData","List","taskModalRef","taskColumnModalRef","loading","getTasks","deleteTask","tasks","setTasks","filters","setFilters","fetchData","data","task","e","destroyTask","id","success","error","updateTaskFinished","old_tasks","index","findIndex","t","_id","new_tasks","filtered_data","filtered_tasks","filter","start_date","deliveryDate","isBefore","end_date","isAfter","finished","undefined","process_id","column_id","user_id","exportToXLS","current","open","Container","div"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport useGetTasks, { TaskType } from './useGetTasks'\nimport messageError from 'Utils/messageError'\nimport Header from '../Kanban/Header'\nimport styled from 'styled-components'\nimport { FiltersType } from '../Kanban/Types'\nimport moment from 'moment'\nimport Table from './Table'\nimport TaskModal, { TaskModalType } from 'Components/Modals/TaskModal/TaskModal'\nimport TaskColumnModal, { TaskColumnModalType } from 'Components/Modals/TaskColumn/TaskColumnModal'\nimport useDestroyTask from 'Components/Modals/TaskModal/useDestroyTask'\nimport { cloneDeep } from 'lodash'\nimport useExportData from './useExportData'\n\nconst List: React.FC = () => {\n  const taskModalRef = useRef<TaskModalType>(null)\n  const taskColumnModalRef = useRef<TaskColumnModalType>(null)\n\n  const [{ loading }, getTasks] = useGetTasks()\n  const [deleteTask] = useDestroyTask()\n\n  const [tasks, setTasks] = useState<TaskType[]>([])\n  const [filters, setFilters] = useState<FiltersType>({})\n\n  const fetchData = async () => {\n    try {\n      const { data } = await getTasks()\n\n      setTasks(data.task || [])\n    } catch (e) {\n      messageError('202102271547')\n    }\n  }\n\n  useEffect(() => {\n    fetchData()\n    // eslint-disable-next-line\n  }, [])\n\n  const destroyTask = async (id: string) => {\n    try {\n      const { data } = await deleteTask(id)\n      const { success } = data || {}\n\n      if (success) fetchData()\n    } catch (error) {\n      messageError('202106042250')\n    }\n  }\n\n  const updateTaskFinished = (task: TaskType) => {\n    setTasks(old_tasks => {\n      const index = old_tasks.findIndex(t => t._id === task._id)\n\n      const new_tasks = cloneDeep(old_tasks)\n\n      new_tasks[index] = task\n\n      return new_tasks\n    })\n  }\n\n  const filtered_data = useMemo(() => {\n      const filtered_tasks = tasks.filter(task => {\n        if (filters.start_date && moment(task.deliveryDate, 'YYYY-MM-DD').isBefore(filters.start_date)) return false\n        if (filters.end_date && moment(task.deliveryDate, 'YYYY-MM-DD').isAfter(filters.end_date)) return false\n        if (filters.finished !== undefined && filters.finished !== task.finished) return false\n        if (filters.process_id && filters.process_id !== task.process_id) return false\n        if (filters.column_id && filters.column_id !== task.column_id) return false\n        if (filters.user_id && filters.user_id !== task.user_id) return false\n\n        return true\n      })\n\n      return filtered_tasks\n  }, [filters, tasks])\n\n  const exportToXLS = useExportData(filtered_data)\n\n  return (\n    <Container>\n      <Header\n        setFilters={setFilters}\n        type=\"list\"\n        openTaskModal={() => taskModalRef.current?.open()}\n        openColumnModal={() => taskColumnModalRef.current?.open()}\n        exportToXLS={exportToXLS}\n      />\n\n      <Table\n        loading={loading}\n        tasks={filtered_data}\n        handleDelete={destroyTask}\n        handleEdit={(id) => taskModalRef.current?.open(id)}\n        updateTaskFinished={updateTaskFinished}\n      />\n\n      <TaskModal ref={taskModalRef} afterSave={() => fetchData()} afterDeleteTask={() => fetchData()}/>\n\n      <TaskColumnModal ref={taskColumnModalRef}/>\n    </Container>\n  )\n}\n\nexport default List\n\nconst Container = styled.div`\n  height: calc(100vh - 5rem);\n  padding: 0 2rem 2rem 0;\n`\n"]},"metadata":{},"sourceType":"module"}