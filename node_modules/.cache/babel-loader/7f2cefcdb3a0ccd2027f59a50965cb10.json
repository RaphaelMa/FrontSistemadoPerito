{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { useState } from 'react';\nimport axios from 'axios';\n\nconst useSaveCompany = () => {\n  const [loading, setLoading] = useState(false);\n\n  const query = async raw_cep => {\n    try {\n      setLoading(true);\n      const cep = raw_cep === null || raw_cep === void 0 ? void 0 : raw_cep.replace(/[^0-9.]/g, '');\n      if ((cep === null || cep === void 0 ? void 0 : cep.length) !== 8) return {\n        success: false\n      };\n      const {\n        data\n      } = await axios.get(`https://viacep.com.br/ws/${cep}/json/`);\n      if (data.erro) return {\n        success: false\n      };\n      return {\n        success: true,\n        data: data\n      };\n    } catch (error) {\n      console.log('[useGetCepData] ', error);\n      return {\n        success: false\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return [query, {\n    loading\n  }];\n};\n\n__signature__(useSaveCompany, \"useState{[loading, setLoading](false)}\");\n\nconst _default = useSaveCompany;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(useSaveCompany, \"useSaveCompany\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Company/useGetCepData.ts\");\n  reactHotLoader.register(_default, \"default\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Company/useGetCepData.ts\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Company/useGetCepData.ts"],"names":["useState","axios","useSaveCompany","loading","setLoading","query","raw_cep","cep","replace","length","success","data","get","erro","error","console","log"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAgBA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAU,KAAV,CAAtC;;AAEA,QAAMK,KAAK,GAAG,MAAOC,OAAP,IAA4B;AACxC,QAAI;AACFF,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMG,GAAG,GAAGD,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEE,OAAT,CAAiB,UAAjB,EAA6B,EAA7B,CAAZ;AACA,UAAI,CAAAD,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEE,MAAL,MAAgB,CAApB,EAAuB,OAAO;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAP;AAEvB,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMV,KAAK,CAACW,GAAN,CAAyB,4BAA2BL,GAAI,QAAxD,CAAvB;AACA,UAAII,IAAI,CAACE,IAAT,EAAe,OAAO;AAAEH,QAAAA,OAAO,EAAE;AAAX,OAAP;AAEf,aAAO;AAAEA,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,IAAI,EAAEA;AAAvB,OAAP;AACD,KATD,CASE,OAAOG,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,KAAhC;AAEA,aAAO;AAAEJ,QAAAA,OAAO,EAAE;AAAX,OAAP;AACD,KAbD,SAaU;AACRN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAjBD;;AAmBA,SAAO,CAACC,KAAD,EAAQ;AAAEF,IAAAA;AAAF,GAAR,CAAP;AACD,CAvBD;;cAAMD,c;;iBAyBSA,c;AAAf;;;;;;;;;;0BAzBMA,c","sourcesContent":["import { useState } from 'react'\nimport axios from 'axios'\n\ntype QueryPayload = {\n  cep?: string,\n  logradouro?: string,\n  complemento?: string,\n  bairro?: string,\n  localidade?: string,\n  uf?:string,\n  ibge?: string,\n  gia?: string,\n  ddd?: string,\n  siafi?: string,\n  erro?: boolean,\n}\n\nconst useSaveCompany = () => {\n  const [loading, setLoading] = useState<boolean>(false)\n\n  const query = async (raw_cep?: string) => {\n    try {\n      setLoading(true)\n      const cep = raw_cep?.replace(/[^0-9.]/g, '')\n      if (cep?.length !== 8) return { success: false }\n\n      const { data } = await axios.get<QueryPayload>(`https://viacep.com.br/ws/${cep}/json/`)\n      if (data.erro) return { success: false }\n\n      return { success: true, data: data }\n    } catch (error) {\n      console.log('[useGetCepData] ', error)\n\n      return { success: false }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return [query, { loading }]  as const\n}\n\nexport default useSaveCompany\n"]},"metadata":{},"sourceType":"module"}