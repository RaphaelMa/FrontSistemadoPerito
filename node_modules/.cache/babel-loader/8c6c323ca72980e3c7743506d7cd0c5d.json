{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Process/ProcessList.tsx\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { message } from 'antd';\nimport EmptyComponent from 'Components/EmptyComponent/EmptyComponent';\nimport moment from 'moment';\nimport { useNavigate } from 'react-router';\nimport { useUserSelector } from 'Redux/UserReducer';\nimport { scapeRegex, removeFalsyValues } from 'Utils/functions';\nimport messageError from 'Utils/messageError';\nimport Header from './Header';\nimport processModal from './processModal';\nimport Table from './ProcessTable';\nimport useColumns from './useColumns';\nimport useDestroyProcess from './useDestroyProcess';\nimport useGetProcesses from './useGetProcesses';\nimport styled from 'styled-components';\nimport { cloneDeep, uniqBy } from 'lodash';\nimport useGetVisibleColumns from './useGetVisibleColumns';\nimport useSaveVisibleColumns from './useSaveVisibleColumns';\nimport useSaveStorage from '../../Utils/useSaveStorage';\nimport useExportData from './useExportData';\nconst multiple_select_array = ['financialSituation_id', 'situation_id', 'judicialDistrict_id', 'nature_id', 'multicompany_id', 'statusImpeachment_id'];\nexport const INITIAL_FILTERS = {\n  pagination: {\n    current_page: 1,\n    page_size: 20\n  },\n  sort: {\n    field: 'processNumber',\n    order: 'ascend'\n  },\n  dates: undefined,\n  person_id: undefined\n};\n\nconst ProcessList = () => {\n  const [visible_columns, setVisibleColumns] = useState();\n  const [data, setData] = useState([]);\n  const [filters, setFilters] = useSaveStorage('process-filters-list', INITIAL_FILTERS);\n  const permissions = useUserSelector(state => state.permissions);\n  const [{\n    loading\n  }, getProcesses] = useGetProcesses();\n  const [{\n    loading: columns_loading\n  }, getVisibleColumns] = useGetVisibleColumns();\n  const [saveVisibleColumns, {\n    loading: save_columns_loading\n  }] = useSaveVisibleColumns();\n  const [destroyProcess, {\n    loading: destroy_loading\n  }] = useDestroyProcess();\n  const navigate = useNavigate();\n\n  const loadProcesses = async () => {\n    try {\n      const columns_response = await getVisibleColumns();\n      setVisibleColumns(columns_response.data);\n      const response = await getProcesses();\n      setData(response.data);\n    } catch (error) {\n      messageError('202008252245');\n    }\n  };\n\n  useEffect(() => {\n    loadProcesses(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleOpenDrawer = id => {\n    if (id) {\n      const process = data.find(process => process._id === id);\n      process.statusImport_key === 'importing' ? processModal() : navigate(`/process/${id}`);\n    } else {\n      navigate('/process');\n    }\n  };\n\n  const onPressEnter = useCallback((value, object_key) => {\n    setFilters(old_filters => ({ ...old_filters,\n      [object_key]: scapeRegex(value)\n    }));\n  }, [setFilters]);\n\n  const handleDelete = async id => {\n    try {\n      const response = await destroyProcess(id);\n\n      if (response.data.success) {\n        message.success('Processo excluído com sucesso');\n        setData(prev => prev.filter(process => process._id !== id));\n      }\n    } catch (error) {\n      messageError('202008262002');\n    }\n  };\n\n  const handleTableChange = useCallback((pagination, filter, sorter) => {\n    var _sorter$column;\n\n    let internal_filters = filters;\n\n    if (sorter === null || sorter === void 0 ? void 0 : (_sorter$column = sorter.column) === null || _sorter$column === void 0 ? void 0 : _sorter$column.sorter) {\n      internal_filters = { ...internal_filters,\n        sort: {\n          order: sorter.order,\n          field: sorter.field\n        }\n      };\n    }\n\n    internal_filters = { ...internal_filters,\n      pagination: {\n        current_page: pagination.current || internal_filters.pagination.current_page,\n        page_size: pagination.pageSize || internal_filters.pagination.page_size\n      }\n    };\n    setFilters(internal_filters);\n  }, [filters, setFilters]);\n\n  const updateProcessPushStatus = (process_id, status) => {\n    setData(old_processes => {\n      const index = old_processes.findIndex(p => p._id === process_id);\n      const process = { ...old_processes[index],\n        statusProcessMonitoring: status\n      };\n      const new_processes = cloneDeep(old_processes);\n      new_processes[index] = process;\n      return new_processes;\n    });\n  };\n\n  const updateProcessFavorite = (process_id, value) => {\n    setData(old_processes => {\n      const index = old_processes.findIndex(p => p._id === process_id);\n      const process = { ...old_processes[index],\n        favorite: value\n      };\n      const new_processes = cloneDeep(old_processes);\n      new_processes[index] = process;\n      return new_processes;\n    });\n  };\n\n  const locale = useMemo(() => ({\n    emptyText: (permissions === null || permissions === void 0 ? void 0 : permissions.process.create) && /*#__PURE__*/React.createElement(EmptyComponent, {\n      onClick: () => handleOpenDrawer(),\n      action_text: \"Processo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }) // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }), [permissions]);\n  const columns = useColumns({\n    handleDelete,\n    handleEdit: handleOpenDrawer,\n    updateProcessPushStatus,\n    updateProcessFavorite,\n    visible_columns\n  });\n  const filterByPersonId = useCallback((data = [], person_id) => data === null || data === void 0 ? void 0 : data.some(item => item.people.people_id === person_id), []);\n  const filtered_data = useMemo(() => {\n    const filtered_data = data.filter(process => Object.keys(removeFalsyValues(filters)).filter(filter => filter !== 'pagination' && filter !== 'sort' && filter !== 'search').reduce((acc, key) => {\n      if (key === 'person_id') {\n        const person_id = filters[key];\n        const person = filterByPersonId(process === null || process === void 0 ? void 0 : process.peoples, person_id);\n        const active_pole_person = filterByPersonId(process === null || process === void 0 ? void 0 : process.activePole, person_id);\n        const passive_pole_person = filterByPersonId(process === null || process === void 0 ? void 0 : process.passivePole, person_id);\n        const has_person = person || active_pole_person || passive_pole_person;\n        return acc && has_person;\n      }\n\n      if (key === 'kind_person_id') {\n        const {\n          kind_person_id\n        } = filters;\n        const person_keys_arr = ['peoples', 'activePole', 'passivePole'];\n\n        const testKindPersonId = people => kind_person_id.includes(people.kindPeople.kindPeople_id);\n\n        return person_keys_arr.reduce((acc, key) => {\n          var _process$key;\n\n          return acc || !!((_process$key = process[key]) === null || _process$key === void 0 ? void 0 : _process$key.some(testKindPersonId));\n        }, false);\n      }\n\n      if (key === 'dates') {\n        const start_date = filters.dates[0];\n        const end_date = filters.dates[1];\n        const date = moment(process.createAt, 'YYYY-MM-DD');\n        return acc && date.isBetween(start_date, end_date, 'days', '[]');\n      } // quando são multiplos\n\n\n      if (multiple_select_array.includes(key)) {\n        var _filters$key;\n\n        // @ts-ignore\n        return acc && !!((_filters$key = filters[key]) === null || _filters$key === void 0 ? void 0 : _filters$key.includes(process[key] || ''));\n      } // @ts-ignore\n\n\n      return acc && process[key] === filters[key];\n    }, true));\n    const max_page = Math.ceil(filtered_data.length / filters.pagination.page_size);\n\n    if (max_page < filters.pagination.current_page && filters.pagination.current_page !== Math.max(max_page, 1)) {\n      setFilters(prev => ({ ...prev,\n        pagination: { ...prev.pagination,\n          current_page: Math.max(max_page, 1)\n        }\n      }));\n    }\n\n    return filtered_data;\n  }, [data, filters, filterByPersonId, setFilters]);\n  const handleSaveVisibleColumns = useCallback(async () => {\n    if (!visible_columns) return;\n\n    try {\n      const response = await saveVisibleColumns(visible_columns);\n\n      if (response.data.success) {\n        message.success('Colunas atualizadas com sucesso!');\n      }\n    } catch (error) {\n      messageError('202103282022');\n    }\n  }, [saveVisibleColumns, visible_columns]);\n  const non_duplicated_process_number = useMemo(() => uniqBy(data, 'processNumber').filter(proc => proc.processNumber), [data]);\n  const exportToXLS = useExportData(filtered_data, visible_columns);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    filters: filters,\n    onPressEnter: onPressEnter,\n    setFilters: setFilters,\n    button_text: \"Novo Processo\",\n    handleNew: handleOpenDrawer,\n    process_number: non_duplicated_process_number,\n    visible_columns: visible_columns,\n    setVisibleColumns: setVisibleColumns,\n    columns_loading: columns_loading,\n    handleSaveVisibleColumns: handleSaveVisibleColumns,\n    save_columns_loading: save_columns_loading,\n    exportToXLS: exportToXLS,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    filtered_data: filtered_data,\n    filters: filters,\n    handleTableChange: handleTableChange,\n    loading: loading || destroy_loading,\n    locale: locale,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }\n  }));\n};\n\n__signature__(ProcessList, \"useState{[visible_columns, setVisibleColumns]}\\nuseState{[data, setData]([])}\\nuseSaveStorage{[filters, setFilters]}\\nuseUserSelector{permissions}\\nuseGetProcesses{[{ loading }, getProcesses]}\\nuseGetVisibleColumns{[{ loading: columns_loading }, getVisibleColumns]}\\nuseSaveVisibleColumns{[saveVisibleColumns, { loading: save_columns_loading }]}\\nuseDestroyProcess{[destroyProcess, { loading: destroy_loading }]}\\nuseNavigate{navigate}\\nuseEffect{}\\nuseCallback{onPressEnter}\\nuseCallback{handleTableChange}\\nuseMemo{locale}\\nuseColumns{columns}\\nuseCallback{filterByPersonId}\\nuseMemo{filtered_data}\\nuseCallback{handleSaveVisibleColumns}\\nuseMemo{non_duplicated_process_number}\\nuseExportData{exportToXLS}\", () => [useSaveStorage, useUserSelector, useGetProcesses, useGetVisibleColumns, useSaveVisibleColumns, useDestroyProcess, useNavigate, useColumns, useExportData]);\n\nProcessList.displayName = \"ProcessList\";\nconst _default = ProcessList;\nexport default _default;\nconst Container = styled.div.withConfig({\n  displayName: \"ProcessList__Container\",\n  componentId: \"sc-9ny49c-0\"\n})([\"height:100%;width:100%;padding:0 2rem 2rem;overflow-x:scroll !important;\"]);\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(multiple_select_array, \"multiple_select_array\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Process/ProcessList.tsx\");\n  reactHotLoader.register(INITIAL_FILTERS, \"INITIAL_FILTERS\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Process/ProcessList.tsx\");\n  reactHotLoader.register(ProcessList, \"ProcessList\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Process/ProcessList.tsx\");\n  reactHotLoader.register(Container, \"Container\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Process/ProcessList.tsx\");\n  reactHotLoader.register(_default, \"default\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Process/ProcessList.tsx\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Process/ProcessList.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","message","EmptyComponent","moment","useNavigate","useUserSelector","scapeRegex","removeFalsyValues","messageError","Header","processModal","Table","useColumns","useDestroyProcess","useGetProcesses","styled","cloneDeep","uniqBy","useGetVisibleColumns","useSaveVisibleColumns","useSaveStorage","useExportData","multiple_select_array","INITIAL_FILTERS","pagination","current_page","page_size","sort","field","order","dates","undefined","person_id","ProcessList","visible_columns","setVisibleColumns","data","setData","filters","setFilters","permissions","state","loading","getProcesses","columns_loading","getVisibleColumns","saveVisibleColumns","save_columns_loading","destroyProcess","destroy_loading","navigate","loadProcesses","columns_response","response","error","handleOpenDrawer","id","process","find","_id","statusImport_key","onPressEnter","value","object_key","old_filters","handleDelete","success","prev","filter","handleTableChange","sorter","internal_filters","column","current","pageSize","updateProcessPushStatus","process_id","status","old_processes","index","findIndex","p","statusProcessMonitoring","new_processes","updateProcessFavorite","favorite","locale","emptyText","create","columns","handleEdit","filterByPersonId","some","item","people","people_id","filtered_data","Object","keys","reduce","acc","key","person","peoples","active_pole_person","activePole","passive_pole_person","passivePole","has_person","kind_person_id","person_keys_arr","testKindPersonId","includes","kindPeople","kindPeople_id","start_date","end_date","date","createAt","isBetween","max_page","Math","ceil","length","max","handleSaveVisibleColumns","non_duplicated_process_number","proc","processNumber","exportToXLS","Container","div"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { message } from 'antd'\nimport { TablePaginationConfig } from 'antd/es/table'\nimport EmptyComponent from 'Components/EmptyComponent/EmptyComponent'\nimport moment from 'moment'\nimport { useNavigate } from 'react-router'\nimport { useUserSelector } from 'Redux/UserReducer'\nimport { scapeRegex, removeFalsyValues } from 'Utils/functions'\nimport messageError from 'Utils/messageError'\nimport Header from './Header'\nimport processModal from './processModal'\nimport Table from './ProcessTable'\nimport { LocalFiltersType, ProcessType, GenericType, VisibleColumnType } from './types'\nimport useColumns from './useColumns'\nimport useDestroyProcess from './useDestroyProcess'\nimport useGetProcesses from './useGetProcesses'\nimport styled from 'styled-components'\nimport { cloneDeep, uniqBy } from 'lodash'\nimport useGetVisibleColumns from './useGetVisibleColumns'\nimport useSaveVisibleColumns from './useSaveVisibleColumns'\nimport useSaveStorage from '../../Utils/useSaveStorage'\nimport useExportData from './useExportData'\n\nconst multiple_select_array = [\n  'financialSituation_id',\n  'situation_id',\n  'judicialDistrict_id',\n  'nature_id',\n  'multicompany_id',\n  'statusImpeachment_id'\n]\n\nexport const INITIAL_FILTERS: LocalFiltersType = {\n  pagination: {\n    current_page: 1,\n    page_size: 20\n  },\n  sort: {\n    field: 'processNumber',\n    order: 'ascend'\n  },\n  dates: undefined,\n  person_id: undefined\n}\n\nconst ProcessList: React.FC = () => {\n  const [visible_columns, setVisibleColumns] = useState<VisibleColumnType>()\n  const [data, setData] = useState<ProcessType[]>([])\n  const [filters, setFilters] = useSaveStorage<any>('process-filters-list', INITIAL_FILTERS)\n\n  const permissions = useUserSelector(state => state.permissions)\n\n  const [{ loading }, getProcesses] = useGetProcesses()\n  const [{ loading: columns_loading }, getVisibleColumns] = useGetVisibleColumns()\n  const [saveVisibleColumns, { loading: save_columns_loading }] = useSaveVisibleColumns()\n  const [destroyProcess, { loading: destroy_loading }] = useDestroyProcess()\n  const navigate = useNavigate()\n\n  const loadProcesses = async () => {\n    try {\n      const columns_response = await getVisibleColumns()\n      setVisibleColumns(columns_response.data)\n\n      const response = await getProcesses()\n      setData(response.data)\n    } catch (error) {\n      messageError('202008252245')\n    }\n  }\n\n  useEffect(() => {\n    loadProcesses()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const handleOpenDrawer = (id?: string) => {\n    if (id) {\n      const process = data.find(process => process._id === id)\n\n      process!.statusImport_key === 'importing' ? processModal() : navigate(`/process/${id}`)\n    } else {\n      navigate('/process')\n    }\n  }\n\n  const onPressEnter = useCallback((value: string, object_key: 'search' | 'person_name') => {\n    setFilters((old_filters: any) => ({ ...old_filters, [object_key]: scapeRegex(value) }))\n  }, [setFilters])\n\n  const handleDelete = async (id: string) => {\n    try {\n      const response = await destroyProcess(id)\n      if (response.data.success) {\n        message.success('Processo excluído com sucesso')\n        setData((prev) => prev.filter(process => process._id !== id))\n      }\n    } catch (error) {\n      messageError('202008262002')\n    }\n  }\n\n  const handleTableChange = useCallback((\n    pagination: TablePaginationConfig,\n    filter: Record<string, React.Key[] | null>,\n    sorter: any\n  ): void => {\n    let internal_filters: LocalFiltersType = filters\n\n    if (sorter?.column?.sorter) {\n      internal_filters = { ...internal_filters, sort: { order: sorter.order, field: sorter.field } }\n    }\n\n    internal_filters = {\n      ...internal_filters,\n      pagination: {\n        current_page: pagination.current || internal_filters.pagination.current_page,\n        page_size: pagination.pageSize || internal_filters.pagination.page_size\n      }\n    }\n    setFilters(internal_filters)\n  }, [filters, setFilters])\n\n  const updateProcessPushStatus = (process_id: string, status: boolean) => {\n    setData(old_processes => {\n      const index = old_processes.findIndex(p => p._id === process_id)\n      const process = { ...old_processes[index], statusProcessMonitoring: status }\n      const new_processes = cloneDeep(old_processes)\n\n      new_processes[index] = process\n\n      return new_processes\n    })\n  }\n\n  const updateProcessFavorite = (process_id: string, value: boolean) => {\n    setData(old_processes => {\n      const index = old_processes.findIndex(p => p._id === process_id)\n      const process = { ...old_processes[index], favorite: value }\n      const new_processes = cloneDeep(old_processes)\n\n      new_processes[index] = process\n\n      return new_processes\n    })\n  }\n\n  const locale = useMemo(() => ({\n    emptyText: (\n      permissions?.process.create && (\n        <EmptyComponent\n          onClick={() => handleOpenDrawer()}\n          action_text=\"Processo\"\n        />\n      )\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }), [permissions])\n\n  const columns = useColumns({\n    handleDelete,\n    handleEdit: handleOpenDrawer,\n    updateProcessPushStatus,\n    updateProcessFavorite,\n    visible_columns\n  })\n\n  const filterByPersonId = useCallback((data: GenericType[] = [], person_id: string) => (\n    data?.some(item => item.people.people_id === person_id)\n  ), [])\n\n  const filtered_data = useMemo(() => {\n    const filtered_data = data.filter(process => (\n      Object.keys(removeFalsyValues(filters))\n        .filter(filter => (filter !== 'pagination' && filter !== 'sort' && filter !== 'search'))\n        .reduce((acc: Boolean, key) => {\n          if (key === 'person_id') {\n            const person_id = filters[key]\n\n            const person = filterByPersonId(process?.peoples, person_id)\n            const active_pole_person = filterByPersonId(process?.activePole, person_id)\n            const passive_pole_person = filterByPersonId(process?.passivePole, person_id)\n\n            const has_person = person || active_pole_person || passive_pole_person\n\n            return acc && has_person\n          }\n\n          if (key === 'kind_person_id') {\n            const { kind_person_id } = filters\n            type key_type = 'peoples' | 'activePole' | 'passivePole'\n            const person_keys_arr: key_type[] = ['peoples', 'activePole', 'passivePole']\n\n            const testKindPersonId = (people: { kindPeople: { kindPeople_id: string } }) => (\n              kind_person_id!.includes(people.kindPeople.kindPeople_id)\n            )\n\n            return person_keys_arr.reduce((acc: boolean, key) => acc || !!process[key]?.some(testKindPersonId), false)\n          }\n\n          if (key === 'dates') {\n            const start_date = filters.dates[0]\n            const end_date = filters.dates[1]\n            const date = moment(process.createAt, 'YYYY-MM-DD')\n\n            return acc && date.isBetween(start_date, end_date, 'days', '[]')\n          }\n\n          // quando são multiplos\n          if (multiple_select_array.includes(key)) {\n            // @ts-ignore\n            return acc && !!filters[key]?.includes(process[key] || '')\n          }\n\n          // @ts-ignore\n          return acc && (process[key] === filters[key])\n        }, true)\n    ))\n\n    const max_page = Math.ceil(filtered_data.length / filters.pagination.page_size)\n\n    if (max_page < filters.pagination.current_page && filters.pagination.current_page !== Math.max(max_page, 1)) {\n      setFilters((prev: { pagination: any }) => ({\n        ...prev,\n        pagination: {\n          ...prev.pagination,\n          current_page: Math.max(max_page, 1)\n        }\n      }))\n    }\n\n    return filtered_data\n  }, [data, filters, filterByPersonId, setFilters])\n\n  const handleSaveVisibleColumns = useCallback(async () => {\n    if (!visible_columns) return\n\n    try {\n      const response = await saveVisibleColumns(visible_columns)\n      if (response.data.success) {\n        message.success('Colunas atualizadas com sucesso!')\n      }\n    } catch (error) {\n      messageError('202103282022')\n    }\n  }, [saveVisibleColumns, visible_columns])\n\n  const non_duplicated_process_number = useMemo(() => uniqBy(data, 'processNumber').filter(proc => proc.processNumber), [data])\n\n  const exportToXLS = useExportData(filtered_data, visible_columns)\n\n  return (\n    <Container>\n      <Header\n        filters={filters}\n        onPressEnter={onPressEnter}\n        setFilters={setFilters}\n        button_text=\"Novo Processo\"\n        handleNew={handleOpenDrawer}\n        process_number={non_duplicated_process_number}\n        visible_columns={visible_columns}\n        setVisibleColumns={setVisibleColumns}\n        columns_loading={columns_loading}\n        handleSaveVisibleColumns={handleSaveVisibleColumns}\n        save_columns_loading={save_columns_loading}\n        exportToXLS={exportToXLS}\n      />\n\n      <Table\n        columns={columns}\n        filtered_data={filtered_data}\n        filters={filters}\n        handleTableChange={handleTableChange}\n        loading={loading || destroy_loading}\n        locale={locale}\n      />\n    </Container>\n  )\n}\n\nexport default ProcessList\n\nconst Container = styled.div`\n  height: 100%;\n  width: 100%;\n  padding: 0 2rem 2rem;\n  overflow-x: scroll !important;\n`\n"]},"metadata":{},"sourceType":"module"}