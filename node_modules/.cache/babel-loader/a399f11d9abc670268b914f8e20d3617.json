{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\nvar defaults = {\n  separator: {\n    thousands: ',',\n    decimal: '.'\n  },\n  output: 'string',\n  format: '{{size}} {{unit}}'\n};\n\nvar readableSize = function readableSize(value, options) {\n  var _options = _extends({}, options),\n      _options$separator = _options.separator,\n      separator = _options$separator === undefined ? false : _options$separator,\n      _options$format = _options.format,\n      format = _options$format === undefined ? defaults.format : _options$format,\n      _options$output = _options.output,\n      output = _options$output === undefined ? defaults.output : _options$output;\n\n  if (!Number.isInteger(value)) {\n    throw new TypeError('\"value\" must be an integer: ' + value);\n  }\n\n  if (value > Number.MAX_SAFE_INTEGER) {\n    // The largest exact integral value is 2^53 - 1, or 9007199254740991.\n    // In ES6, this is defined as Number.MAX_SAFE_INTEGER.\n    throw new Error('\"value\" exceeds the integer range (' + Number.MAX_SAFE_INTEGER + '): ' + value);\n  }\n\n  if (value < 0) {\n    throw new TypeError('\"value\" is invalid: ' + value);\n  }\n\n  var size = String(value);\n  var unit = units[0];\n\n  if (value >= 1024) {\n    var u = Math.floor(Math.log(value) / Math.log(1024));\n\n    if (u >= units.length) {\n      u = units.length - 1;\n    }\n\n    size = value / Math.pow(1024, u);\n\n    if (u + 1 < units.length && size >= 1000) {\n      size /= 1024;\n      ++u;\n    }\n\n    if (size >= 100 || u === 0) {\n      size = String((Math.floor(size * 1) / 1).toFixed(0));\n    } else if (size >= 10) {\n      size = String((Math.floor(size * 10) / 10).toFixed(1));\n    } else {\n      size = String((Math.floor(size * 100) / 100).toFixed(2));\n    }\n\n    unit = units[u];\n  }\n\n  if ((typeof separator === 'undefined' ? 'undefined' : _typeof(separator)) === 'object' || separator === true) {\n    var _separator = _extends({}, separator),\n        _separator$thousands = _separator.thousands,\n        thousands = _separator$thousands === undefined ? defaults.separator.thousands : _separator$thousands,\n        _separator$decimal = _separator.decimal,\n        decimal = _separator$decimal === undefined ? defaults.separator.decimal : _separator$decimal;\n\n    var parts = size.split(defaults.separator.decimal);\n\n    if (thousands && parts[0] && parts[0].length > 3) {\n      parts[0] = parts[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, thousands);\n    }\n\n    if (decimal) {\n      size = parts.join(decimal);\n    } else {\n      size = parts.join(defaults.separator.decimal);\n    }\n  }\n\n  if (typeof output === 'function') {\n    return output({\n      size: size,\n      unit: unit\n    });\n  }\n\n  if (output === 'array') {\n    return [size, unit];\n  }\n\n  if (output === 'object') {\n    return {\n      size: size,\n      unit: unit\n    };\n  }\n\n  return String(format).replace('{{size}}', size).replace('{{unit}}', unit);\n};\n\nexports.default = readableSize;","map":null,"metadata":{},"sourceType":"script"}