{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nvar Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n/** Used as references for various `Number` constants. */\n\n\nvar INFINITY = 1 / 0;\n/** Used to convert symbols to primitives and strings. */\n\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\n\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(INFINITY, \"INFINITY\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/lodash/_baseToString.js\");\n  reactHotLoader.register(symbolProto, \"symbolProto\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/lodash/_baseToString.js\");\n  reactHotLoader.register(symbolToString, \"symbolToString\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/lodash/_baseToString.js\");\n  reactHotLoader.register(baseToString, \"baseToString\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/lodash/_baseToString.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/lodash/_baseToString.js"],"names":["Symbol","require","arrayMap","isArray","isSymbol","INFINITY","symbolProto","prototype","undefined","symbolToString","toString","baseToString","value","call","result","module","exports"],"mappings":";;;;;;;;;AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAApB;AAAA,IACIC,QAAQ,GAAGD,OAAO,CAAC,aAAD,CADtB;AAAA,IAEIE,OAAO,GAAGF,OAAO,CAAC,WAAD,CAFrB;AAAA,IAGIG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAHtB;AAKA;;;AACA,IAAII,QAAQ,GAAG,IAAI,CAAnB;AAEA;;AACA,IAAIC,WAAW,GAAGN,MAAM,GAAGA,MAAM,CAACO,SAAV,GAAsBC,SAA9C;AAAA,IACIC,cAAc,GAAGH,WAAW,GAAGA,WAAW,CAACI,QAAf,GAA0BF,SAD1D;AAGA;;;;;;;;;AAQA,SAASG,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B;AACA,MAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;AAC5B,WAAOA,KAAP;AACD;;AACD,MAAIT,OAAO,CAACS,KAAD,CAAX,EAAoB;AAClB;AACA,WAAOV,QAAQ,CAACU,KAAD,EAAQD,YAAR,CAAR,GAAgC,EAAvC;AACD;;AACD,MAAIP,QAAQ,CAACQ,KAAD,CAAZ,EAAqB;AACnB,WAAOH,cAAc,GAAGA,cAAc,CAACI,IAAf,CAAoBD,KAApB,CAAH,GAAgC,EAArD;AACD;;AACD,MAAIE,MAAM,GAAIF,KAAK,GAAG,EAAtB;AACA,SAAQE,MAAM,IAAI,GAAV,IAAkB,IAAIF,KAAL,IAAe,CAACP,QAAlC,GAA8C,IAA9C,GAAqDS,MAA5D;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBL,YAAjB;;;;;;;;;;0BA9BIN,Q;0BAGAC,W;0BACAG,c;0BAUKE,Y","sourcesContent":["var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n"]},"metadata":{},"sourceType":"script"}