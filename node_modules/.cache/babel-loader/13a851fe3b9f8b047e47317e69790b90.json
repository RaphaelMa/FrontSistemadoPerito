{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Tasks/List/useColumns.tsx\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useCallback, useMemo } from 'react';\nimport { theme } from 'Styles/theme';\nimport { useUserSelector } from 'Redux/UserReducer';\nimport { Button, message, Popconfirm, Switch } from 'antd';\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\nimport useSaveTask from 'Components/Modals/TaskModal/useSaveTask';\nimport DateTag from 'Pages/Tasks/Kanban/Task/DateTag';\nimport messageError from 'Utils/messageError';\nimport moment from 'moment';\n\nconst useColumns = ({\n  handleDelete,\n  handleEdit,\n  updateTaskFinished\n}) => {\n  const permissions = useUserSelector(state => state.permissions);\n  const [saveTask, {\n    loading\n  }] = useSaveTask();\n  const handleChangeFinished = useCallback(async (value, task) => {\n    const new_task = { ...task,\n      finished: value,\n      finishedDate: value ? moment().format('YYYY-MM-DD') : null\n    };\n\n    try {\n      const {\n        data: {\n          success,\n          message: msg\n        }\n      } = await saveTask(new_task);\n\n      if (success) {\n        updateTaskFinished(new_task);\n        return;\n      }\n\n      message.error(msg);\n    } catch (error) {\n      messageError('202102071449');\n    }\n  }, [saveTask, updateTaskFinished]);\n  return useMemo(() => {\n    const columns = [{\n      title: 'Coluna',\n      dataIndex: 'column_description',\n      key: 'column_description',\n      ellipsis: true\n    }, {\n      title: 'Título',\n      dataIndex: 'title',\n      key: 'title',\n      ellipsis: true\n    }, {\n      title: 'Responsável',\n      dataIndex: 'user_name',\n      key: 'user_name',\n      width: 250,\n      ellipsis: true\n    }, {\n      title: 'Processo',\n      dataIndex: 'process_number',\n      key: 'process_number',\n      align: 'center',\n      width: 250,\n      ellipsis: true\n    }, {\n      title: 'Data Entrega',\n      dataIndex: 'deliveryDateTask',\n      key: 'deliveryDateTask',\n      align: 'center',\n      width: 110,\n      render: (_, task) => /*#__PURE__*/React.createElement(DateTag, {\n        task: task,\n        date_format: \"DD/MM/YYYY\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 38\n        }\n      })\n    }, {\n      title: 'Finalizado',\n      dataIndex: 'finished',\n      key: 'finished',\n      align: 'center',\n      width: 85,\n      render: finished => finished ? 'Sim' : 'Não'\n    }, {\n      title: 'Ações',\n      key: 'actions',\n      align: 'center',\n      width: 120,\n      render: task => /*#__PURE__*/React.createElement(React.Fragment, null, (permissions === null || permissions === void 0 ? void 0 : permissions.task.delete) && /*#__PURE__*/React.createElement(Popconfirm, {\n        title: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 21\n          }\n        }, \"A pessoa ser\\xE1 exclu\\xEDda de todos os processos em que esta atrelada.\"), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }\n        }, \"Deseja continuar?\")),\n        okText: \"Sim\",\n        cancelText: \"N\\xE3o\",\n        okType: \"danger\",\n        placement: \"topLeft\",\n        onConfirm: () => handleDelete(task._id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: \"text\",\n        icon: /*#__PURE__*/React.createElement(DeleteOutlined, {\n          style: {\n            color: theme.colors.red\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }\n      })), (permissions === null || permissions === void 0 ? void 0 : permissions.task.update) && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        type: \"text\",\n        icon: /*#__PURE__*/React.createElement(EditOutlined, {\n          style: {\n            color: theme.colors.primary\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }\n        }),\n        onClick: () => handleEdit(task._id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Switch, {\n        size: \"small\",\n        checked: task.finished,\n        loading: loading,\n        onChange: value => handleChangeFinished(value, task),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }\n      })))\n    }];\n    return columns;\n  }, [handleChangeFinished, handleDelete, handleEdit, loading, permissions]);\n};\n\n__signature__(useColumns, \"useUserSelector{permissions}\\nuseSaveTask{[saveTask, { loading }]}\\nuseCallback{handleChangeFinished}\\nuseMemo{}\", () => [useUserSelector, useSaveTask]);\n\nconst _default = useColumns;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(useColumns, \"useColumns\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Tasks/List/useColumns.tsx\");\n  reactHotLoader.register(_default, \"default\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Tasks/List/useColumns.tsx\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Tasks/List/useColumns.tsx"],"names":["React","useCallback","useMemo","theme","useUserSelector","Button","message","Popconfirm","Switch","DeleteOutlined","EditOutlined","useSaveTask","DateTag","messageError","moment","useColumns","handleDelete","handleEdit","updateTaskFinished","permissions","state","saveTask","loading","handleChangeFinished","value","task","new_task","finished","finishedDate","format","data","success","msg","error","columns","title","dataIndex","key","ellipsis","width","align","render","_","delete","_id","color","colors","red","update","primary"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo } from 'react'\nimport { theme } from 'Styles/theme'\nimport { TaskType } from './useGetTasks'\nimport { ColumnsType } from 'antd/es/table'\nimport { useUserSelector } from 'Redux/UserReducer'\nimport { Button, message, Popconfirm, Switch } from 'antd'\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\nimport useSaveTask from 'Components/Modals/TaskModal/useSaveTask'\nimport DateTag from 'Pages/Tasks/Kanban/Task/DateTag'\nimport messageError from 'Utils/messageError'\nimport moment from 'moment'\n\ntype Props = {\n  handleDelete: (id: string) => void,\n  handleEdit: (id: string) => void,\n  updateTaskFinished: (task: TaskType) => void,\n}\n\nconst useColumns = ({ handleDelete, handleEdit, updateTaskFinished }: Props) => {\n  const permissions = useUserSelector(state => state.permissions)\n\n  const [saveTask, { loading }] = useSaveTask()\n\n  const handleChangeFinished = useCallback(async (value: boolean, task: TaskType) => {\n    const new_task: TaskType = {\n      ...task,\n      finished: value,\n      finishedDate: value ? moment().format('YYYY-MM-DD') : null\n    }\n\n    try {\n      const { data: { success, message: msg } } = await saveTask(new_task)\n\n      if (success) {\n        updateTaskFinished(new_task)\n        return\n      }\n\n      message.error(msg)\n    } catch (error) {\n      messageError('202102071449')\n    }\n  }, [saveTask, updateTaskFinished])\n\n  return useMemo(() => {\n    const columns: ColumnsType<TaskType> = [\n      {\n        title: 'Coluna',\n        dataIndex: 'column_description',\n        key: 'column_description',\n        ellipsis: true,\n      },\n      {\n        title: 'Título',\n        dataIndex: 'title',\n        key: 'title',\n        ellipsis: true,\n      },\n      {\n        title: 'Responsável',\n        dataIndex: 'user_name',\n        key: 'user_name',\n        width: 250,\n        ellipsis: true,\n      },\n      {\n        title: 'Processo',\n        dataIndex: 'process_number',\n        key: 'process_number',\n        align: 'center',\n        width: 250,\n        ellipsis: true,\n      },\n      {\n        title: 'Data Entrega',\n        dataIndex: 'deliveryDateTask',\n        key: 'deliveryDateTask',\n        align: 'center',\n        width: 110,\n        render: (_: string, task) => <DateTag task={task} date_format=\"DD/MM/YYYY\"/>\n      },\n      {\n        title: 'Finalizado',\n        dataIndex: 'finished',\n        key: 'finished',\n        align: 'center',\n        width: 85,\n        render: (finished) => finished ? 'Sim' : 'Não'\n      },\n      {\n        title: 'Ações',\n        key: 'actions',\n        align: 'center',\n        width: 120,\n        render: (task: TaskType) => (\n          <>\n            {permissions?.task.delete && (\n              <Popconfirm\n                title={\n                  <>\n                    <div>A pessoa será excluída de todos os processos em que esta atrelada.</div>\n                    <div>Deseja continuar?</div>\n                  </>\n                }\n                okText=\"Sim\"\n                cancelText=\"Não\"\n                okType=\"danger\"\n                placement=\"topLeft\"\n                onConfirm={() => handleDelete(task._id)}\n              >\n                <Button\n                  type=\"text\"\n                  icon={<DeleteOutlined style={{ color: theme.colors.red }}/>}\n                />\n              </Popconfirm>\n            )}\n            {permissions?.task.update && (\n              <>\n                <Button\n                  type=\"text\"\n                  icon={<EditOutlined style={{ color: theme.colors.primary }}/>}\n                  onClick={() => handleEdit(task._id)}\n                />\n\n                <Switch\n                  size=\"small\"\n                  checked={task.finished}\n                  loading={loading}\n                  onChange={(value) => handleChangeFinished(value, task)}\n                />\n              </>\n            )}\n          </>\n        ),\n      },\n   ]\n\n   return columns\n  }, [handleChangeFinished, handleDelete, handleEdit, loading, permissions])\n}\n\nexport default useColumns\n"]},"metadata":{},"sourceType":"module"}