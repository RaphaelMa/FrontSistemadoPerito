{"ast":null,"code":"var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nmodule.exports = function (strings, ...exps) {\n  const result = [];\n  const {\n    isArray\n  } = Array; // Convert quantity expressions to [quantity, quantity string] tuples\n\n  exps.forEach((v, i) => {\n    if (typeof v == 'number') {\n      exps[i] = [v, v];\n    } else if (isArray(v)) {\n      if (typeof v[0] == 'number') {\n        exps[i] = [v[0], typeof v[1] == 'function' ? v[1](v[0]) : null];\n      } else {\n        // Edge case where the caller injects an Array but doesn't intend for it\n        // to be treated as a quantity.  Not worth solving at present.\n        throw TypeError('First item in array must be a Number');\n      }\n    }\n  }); // Initialize the quantity to use for pluralization\n\n  let qty = exps.find(isArray);\n  let last;\n\n  for (let s of strings) {\n    // Trim leading whitespace hidden quantities\n    if (isArray(last) && last[1] == null) {\n      s = s.replace(/^\\s+/, '');\n    } // Push current string, pluralizing if we have a valid quantity\n\n\n    if (qty) {\n      result.push(s.replace(/\\[([^|]*)\\|([^\\]]*)\\]/g, qty[0] == 1 ? '$1' : '$2'));\n    } else {\n      result.push(s);\n    }\n\n    if (!exps.length) break; // Locate next quantity\n\n    qty = exps.find(isArray) || qty; // Push quantity string\n\n    last = exps.shift();\n    result.push(last === qty ? qty[1] : last);\n  }\n\n  return result.join('');\n};","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/simplur/index.js"],"names":["module","exports","strings","exps","result","isArray","Array","forEach","v","i","TypeError","qty","find","last","s","replace","push","length","shift","join"],"mappings":";;;;AAAAA,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkB,GAAGC,IAArB,EAA2B;AAC1C,QAAMC,MAAM,GAAG,EAAf;AACA,QAAM;AAACC,IAAAA;AAAD,MAAYC,KAAlB,CAF0C,CAI1C;;AACAH,EAAAA,IAAI,CAACI,OAAL,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACrB,QAAI,OAAOD,CAAP,IAAa,QAAjB,EAA2B;AACzBL,MAAAA,IAAI,CAACM,CAAD,CAAJ,GAAU,CAACD,CAAD,EAAIA,CAAJ,CAAV;AACD,KAFD,MAEO,IAAIH,OAAO,CAACG,CAAD,CAAX,EAAgB;AACrB,UAAI,OAAOA,CAAC,CAAC,CAAD,CAAR,IAAgB,QAApB,EAA8B;AAC5BL,QAAAA,IAAI,CAACM,CAAD,CAAJ,GAAU,CAACD,CAAC,CAAC,CAAD,CAAF,EAAO,OAAOA,CAAC,CAAC,CAAD,CAAR,IAAe,UAAf,GAA4BA,CAAC,CAAC,CAAD,CAAD,CAAKA,CAAC,CAAC,CAAD,CAAN,CAA5B,GAAyC,IAAhD,CAAV;AACD,OAFD,MAEO;AACL;AACA;AACA,cAAME,SAAS,CAAC,sCAAD,CAAf;AACD;AACF;AACF,GAZD,EAL0C,CAmB1C;;AACA,MAAIC,GAAG,GAAGR,IAAI,CAACS,IAAL,CAAUP,OAAV,CAAV;AACA,MAAIQ,IAAJ;;AAEA,OAAK,IAAIC,CAAT,IAAcZ,OAAd,EAAuB;AACrB;AACA,QAAIG,OAAO,CAACQ,IAAD,CAAP,IAAiBA,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAhC,EAAsC;AACpCC,MAAAA,CAAC,GAAGA,CAAC,CAACC,OAAF,CAAU,MAAV,EAAkB,EAAlB,CAAJ;AACD,KAJoB,CAMrB;;;AACA,QAAIJ,GAAJ,EAAS;AACPP,MAAAA,MAAM,CAACY,IAAP,CAAYF,CAAC,CAACC,OAAF,CAAU,wBAAV,EAAoCJ,GAAG,CAAC,CAAD,CAAH,IAAU,CAAV,GAAc,IAAd,GAAqB,IAAzD,CAAZ;AACD,KAFD,MAEO;AACLP,MAAAA,MAAM,CAACY,IAAP,CAAYF,CAAZ;AACD;;AAED,QAAI,CAACX,IAAI,CAACc,MAAV,EAAkB,MAbG,CAerB;;AACAN,IAAAA,GAAG,GAAGR,IAAI,CAACS,IAAL,CAAUP,OAAV,KAAsBM,GAA5B,CAhBqB,CAkBrB;;AACAE,IAAAA,IAAI,GAAGV,IAAI,CAACe,KAAL,EAAP;AACAd,IAAAA,MAAM,CAACY,IAAP,CAAYH,IAAI,KAAKF,GAAT,GAAeA,GAAG,CAAC,CAAD,CAAlB,GAAwBE,IAApC;AACD;;AAED,SAAOT,MAAM,CAACe,IAAP,CAAY,EAAZ,CAAP;AACD,CA/CD","sourcesContent":["module.exports = function(strings, ...exps) {\n  const result = [];\n  const {isArray} = Array;\n\n  // Convert quantity expressions to [quantity, quantity string] tuples\n  exps.forEach((v, i) => {\n    if (typeof(v) == 'number') {\n      exps[i] = [v, v];\n    } else if (isArray(v)) {\n      if (typeof(v[0]) == 'number') {\n        exps[i] = [v[0], typeof v[1] == 'function' ? v[1](v[0]) : null];\n      } else {\n        // Edge case where the caller injects an Array but doesn't intend for it\n        // to be treated as a quantity.  Not worth solving at present.\n        throw TypeError('First item in array must be a Number');\n      }\n    }\n  });\n\n  // Initialize the quantity to use for pluralization\n  let qty = exps.find(isArray);\n  let last;\n\n  for (let s of strings) {\n    // Trim leading whitespace hidden quantities\n    if (isArray(last) && last[1] == null) {\n      s = s.replace(/^\\s+/, '');\n    }\n\n    // Push current string, pluralizing if we have a valid quantity\n    if (qty) {\n      result.push(s.replace(/\\[([^|]*)\\|([^\\]]*)\\]/g, qty[0] == 1 ? '$1' : '$2'));\n    } else {\n      result.push(s);\n    }\n\n    if (!exps.length) break;\n\n    // Locate next quantity\n    qty = exps.find(isArray) || qty;\n\n    // Push quantity string\n    last = exps.shift();\n    result.push(last === qty ? qty[1] : last);\n  }\n\n  return result.join('');\n};\n"]},"metadata":{},"sourceType":"script"}