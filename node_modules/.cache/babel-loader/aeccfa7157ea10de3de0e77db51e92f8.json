{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport moment from \"moment\";\nconst LOCALE = 'pt-BR';\nconst CURRENCY = 'BRL';\nexport const currencyFormatter = (raw_value, options = {}) => {\n  const {\n    cents = false\n  } = options;\n  const formatter = new Intl.NumberFormat(LOCALE, {\n    style: 'currency',\n    currency: CURRENCY,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  });\n  let value = parseFloat(`${raw_value}`) || 0;\n  if (cents) value /= 100.0;\n  const DEFAULT_FORMAT = {\n    group: '.',\n    decimal: ','\n  };\n  return formatter.formatToParts(value).map(({\n    type,\n    value\n  }) => {\n    if (type in DEFAULT_FORMAT) return DEFAULT_FORMAT[type];\n    return value;\n  }).reduce((string, part) => string + part);\n};\nexport const currencyParser = raw_value => parseInt((raw_value || '0').replace(/[^\\d]/g, ''));\nexport const phoneFormatter = phone => {\n  if (!phone) return '';\n  phone = phone.toString();\n  phone = phone.replace(/\\D/g, '');\n  phone = phone.replace(/^(\\d{2})(\\d)/g, '($1) $2');\n  return phone.replace(/(\\d)(\\d{4})$/, '$1-$2');\n};\nexport const documentFormatter = document => {\n  if (!document) return '';\n  document = document.toString();\n  document = document.replace(/\\D/g, '');\n\n  if (document.length >= 14) {\n    return document.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d)/g, '$1.$2.$3/$4-$5');\n  }\n\n  return document.replace(/^(\\d{3})(\\d{3})(\\d{3})(\\d)/g, '$1.$2.$3-$4');\n};\n\n/**\n * Função para formatar número.\n * @param {number} number - Número para ser formatado.\n * @param {Object} options - Opções extras que podem ser informadas.\n * @param {number} options.precision - Precisão do número formatado. Valor padrão é 2.\n * @param {string} options.group_separator - Separador de agrupamento. Valor padrão é '.'.\n * @param {string} options.decimal_separator - Separador decimal. Valor padrão é ','.\n */\nexport const numberFormatter = (number, options = {}) => {\n  const {\n    precision = 2,\n    group_separator = '.',\n    decimal_separator = ','\n  } = options;\n  const formatter = new Intl.NumberFormat(LOCALE, {\n    minimumFractionDigits: precision,\n    maximumFractionDigits: precision\n  });\n  return formatter.formatToParts(number).map(({\n    type,\n    value\n  }) => {\n    switch (type) {\n      case 'group':\n        return group_separator;\n\n      case 'decimal':\n        return decimal_separator;\n\n      default:\n        return value;\n    }\n  }).reduce((string, part) => string + part);\n};\n\n/**\n * Função para formatar número para porcentagem.\n * @param {number | string} raw_value - Número para ser formatado.\n * @param {Object} options - Opções extras que podem ser informadas.\n * @param {number} options.precision - Precisão do número formatado. Valor padrão é 2.\n * @param {string} options.symbol_position - Posição do simbolo. Valor padrão é 'left'.\n * @param {string} options.group_separator - Separador de agrupamento. Valor padrão é '.'.\n * @param {string} options.decimal_separator - Separador decimal. Valor padrão é ','.\n */\nexport const percentageFormatter = (raw_value, options = {}) => {\n  const {\n    symbol_position = 'left',\n    precision = 2,\n    group_separator = '.',\n    decimal_separator = ','\n  } = options;\n  const value = parseFloat(`${raw_value}`) || 0;\n  const prefix = symbol_position === 'left' ? '% ' : '';\n  const suffix = symbol_position === 'right' ? '%' : '';\n  const number = numberFormatter(value, {\n    precision,\n    group_separator,\n    decimal_separator\n  });\n  return `${prefix}${number}${suffix}`;\n};\nexport const capitalize = str => str.charAt(0).toUpperCase() + str.slice(1);\nconst MOMENT_FORMAT = 'YYYY/MM/DD';\nconst DEFAULT_FORMAT = 'DD/MM/YYYY';\nexport const renderDate = date => date ? moment(date, MOMENT_FORMAT).format(DEFAULT_FORMAT) : undefined;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(LOCALE, \"LOCALE\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Utils/formatters.ts\");\n  reactHotLoader.register(CURRENCY, \"CURRENCY\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Utils/formatters.ts\");\n  reactHotLoader.register(currencyFormatter, \"currencyFormatter\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Utils/formatters.ts\");\n  reactHotLoader.register(currencyParser, \"currencyParser\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Utils/formatters.ts\");\n  reactHotLoader.register(phoneFormatter, \"phoneFormatter\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Utils/formatters.ts\");\n  reactHotLoader.register(documentFormatter, \"documentFormatter\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Utils/formatters.ts\");\n  reactHotLoader.register(numberFormatter, \"numberFormatter\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Utils/formatters.ts\");\n  reactHotLoader.register(percentageFormatter, \"percentageFormatter\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Utils/formatters.ts\");\n  reactHotLoader.register(capitalize, \"capitalize\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Utils/formatters.ts\");\n  reactHotLoader.register(MOMENT_FORMAT, \"MOMENT_FORMAT\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Utils/formatters.ts\");\n  reactHotLoader.register(DEFAULT_FORMAT, \"DEFAULT_FORMAT\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Utils/formatters.ts\");\n  reactHotLoader.register(renderDate, \"renderDate\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Utils/formatters.ts\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Utils/formatters.ts"],"names":["moment","LOCALE","CURRENCY","currencyFormatter","raw_value","options","cents","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","value","parseFloat","DEFAULT_FORMAT","group","decimal","formatToParts","map","type","reduce","string","part","currencyParser","parseInt","replace","phoneFormatter","phone","toString","documentFormatter","document","length","numberFormatter","number","precision","group_separator","decimal_separator","percentageFormatter","symbol_position","prefix","suffix","capitalize","str","charAt","toUpperCase","slice","MOMENT_FORMAT","renderDate","date","format","undefined"],"mappings":";;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,MAAMC,MAAM,GAAG,OAAf;AACA,MAAMC,QAAQ,GAAG,KAAjB;AAIA,OAAO,MAAMC,iBAAoC,GAAG,CAACC,SAAD,EAAYC,OAAO,GAAG,EAAtB,KAA6B;AAC/E,QAAM;AAAEC,IAAAA,KAAK,GAAG;AAAV,MAAoBD,OAA1B;AACA,QAAME,SAAS,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsBR,MAAtB,EAA8B;AAC9CS,IAAAA,KAAK,EAAE,UADuC;AAC3BC,IAAAA,QAAQ,EAAET,QADiB;AACPU,IAAAA,qBAAqB,EAAE,CADhB;AACmBC,IAAAA,qBAAqB,EAAE;AAD1C,GAA9B,CAAlB;AAIA,MAAIC,KAAK,GAAGC,UAAU,CAAE,GAAEX,SAAU,EAAd,CAAV,IAA8B,CAA1C;AACA,MAAIE,KAAJ,EAAWQ,KAAK,IAAI,KAAT;AAEX,QAAME,cAAc,GAAG;AAAEC,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,OAAO,EAAE;AAAvB,GAAvB;AAEA,SAAOX,SAAS,CAACY,aAAV,CAAwBL,KAAxB,EAA+BM,GAA/B,CAAmC,CAAC;AAAEC,IAAAA,IAAF;AAAQP,IAAAA;AAAR,GAAD,KAAqB;AAC7D,QAAIO,IAAI,IAAIL,cAAZ,EAA4B,OAAOA,cAAc,CAAEK,IAAF,CAArB;AAE5B,WAAOP,KAAP;AACD,GAJM,EAIJQ,MAJI,CAIG,CAACC,MAAD,EAASC,IAAT,KAAkBD,MAAM,GAAGC,IAJ9B,CAAP;AAKD,CAhBM;AAkBP,OAAO,MAAMC,cAAc,GAAIrB,SAAD,IAC5BsB,QAAQ,CAAC,CAACtB,SAAS,IAAI,GAAd,EAAmBuB,OAAnB,CAA2B,QAA3B,EAAqC,EAArC,CAAD,CADH;AAIP,OAAO,MAAMC,cAAc,GAAIC,KAAD,IAA6B;AACzD,MAAI,CAACA,KAAL,EAAY,OAAO,EAAP;AAEZA,EAAAA,KAAK,GAAGA,KAAK,CAACC,QAAN,EAAR;AACAD,EAAAA,KAAK,GAAGA,KAAK,CAACF,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAR;AACAE,EAAAA,KAAK,GAAGA,KAAK,CAACF,OAAN,CAAc,eAAd,EAA+B,SAA/B,CAAR;AAEA,SAAOE,KAAK,CAACF,OAAN,CAAc,cAAd,EAA8B,OAA9B,CAAP;AACD,CARM;AAUP,OAAO,MAAMI,iBAAiB,GAAIC,QAAD,IAAgC;AAC/D,MAAI,CAACA,QAAL,EAAe,OAAO,EAAP;AAEfA,EAAAA,QAAQ,GAAGA,QAAQ,CAACF,QAAT,EAAX;AACAE,EAAAA,QAAQ,GAAGA,QAAQ,CAACL,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,CAAX;;AACA,MAAIK,QAAQ,CAACC,MAAT,IAAmB,EAAvB,EAA2B;AACzB,WAAOD,QAAQ,CAACL,OAAT,CAAiB,oCAAjB,EAAuD,gBAAvD,CAAP;AACD;;AAED,SAAOK,QAAQ,CAACL,OAAT,CAAiB,6BAAjB,EAAgD,aAAhD,CAAP;AACD,CAVM;;AAiBP;;;;;;;;AASA,OAAO,MAAMO,eAAgC,GAAG,CAACC,MAAD,EAAS9B,OAAO,GAAG,EAAnB,KAA0B;AACxE,QAAM;AAAE+B,IAAAA,SAAS,GAAG,CAAd;AAAiBC,IAAAA,eAAe,GAAG,GAAnC;AAAwCC,IAAAA,iBAAiB,GAAG;AAA5D,MAAoEjC,OAA1E;AACA,QAAME,SAAS,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsBR,MAAtB,EAA8B;AAC9CW,IAAAA,qBAAqB,EAAEwB,SADuB;AAE9CvB,IAAAA,qBAAqB,EAAEuB;AAFuB,GAA9B,CAAlB;AAKA,SAAO7B,SAAS,CAACY,aAAV,CAAwBgB,MAAxB,EAAgCf,GAAhC,CAAoC,CAAC;AAAEC,IAAAA,IAAF;AAAQP,IAAAA;AAAR,GAAD,KAAqB;AAC9D,YAAQO,IAAR;AACE,WAAK,OAAL;AACE,eAAOgB,eAAP;;AACF,WAAK,SAAL;AACE,eAAOC,iBAAP;;AACF;AACE,eAAOxB,KAAP;AANJ;AAQD,GATM,EASJQ,MATI,CASG,CAACC,MAAD,EAASC,IAAT,KAAkBD,MAAM,GAAGC,IAT9B,CAAP;AAUD,CAjBM;;AA0BP;;;;;;;;;AAUA,OAAO,MAAMe,mBAAwC,GAAG,CAACnC,SAAD,EAAYC,OAAO,GAAG,EAAtB,KAA6B;AACnF,QAAM;AAAEmC,IAAAA,eAAe,GAAG,MAApB;AAA4BJ,IAAAA,SAAS,GAAG,CAAxC;AAA2CC,IAAAA,eAAe,GAAG,GAA7D;AAAkEC,IAAAA,iBAAiB,GAAG;AAAtF,MAA8FjC,OAApG;AACA,QAAMS,KAAK,GAAGC,UAAU,CAAE,GAAEX,SAAU,EAAd,CAAV,IAA8B,CAA5C;AAEA,QAAMqC,MAAM,GAAGD,eAAe,KAAK,MAApB,GAA6B,IAA7B,GAAoC,EAAnD;AACA,QAAME,MAAM,GAAGF,eAAe,KAAK,OAApB,GAA8B,GAA9B,GAAoC,EAAnD;AACA,QAAML,MAAM,GAAGD,eAAe,CAACpB,KAAD,EAAQ;AAAEsB,IAAAA,SAAF;AAAaC,IAAAA,eAAb;AAA8BC,IAAAA;AAA9B,GAAR,CAA9B;AAEA,SAAQ,GAAEG,MAAO,GAAEN,MAAO,GAAEO,MAAO,EAAnC;AACD,CATM;AAWP,OAAO,MAAMC,UAAU,GAAIC,GAAD,IAAyBA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAACG,KAAJ,CAAU,CAAV,CAA1E;AAGP,MAAMC,aAAa,GAAG,YAAtB;AACA,MAAMhC,cAAc,GAAG,YAAvB;AAEA,OAAO,MAAMiC,UAAU,GAAIC,IAAD,IAA0BA,IAAI,GAAGlD,MAAM,CAACkD,IAAD,EAAOF,aAAP,CAAN,CAA4BG,MAA5B,CAAmCnC,cAAnC,CAAH,GAAwDoC,SAAzG;;;;;;;;;;0BApHDnD,M;0BACAC,Q;0BAIOC,iB;0BAkBAsB,c;0BAIAG,c;0BAUAG,iB;0BA0BAG,e;0BAoCAK,mB;0BAWAI,U;0BAGPK,a;0BACAhC,c;0BAEOiC,U","sourcesContent":["import moment from \"moment\"\n\nconst LOCALE = 'pt-BR'\nconst CURRENCY = 'BRL'\n\ntype CurrencyFormatter = (value?: string | number, options?: { cents?: boolean }) => string\n\nexport const currencyFormatter: CurrencyFormatter = (raw_value, options = {}) => {\n  const { cents = false } = options\n  const formatter = new Intl.NumberFormat(LOCALE, {\n    style: 'currency', currency: CURRENCY, minimumFractionDigits: 2, maximumFractionDigits: 2,\n  })\n\n  let value = parseFloat(`${raw_value}`) || 0\n  if (cents) value /= 100.0\n\n  const DEFAULT_FORMAT = { group: '.', decimal: ',' }\n\n  return formatter.formatToParts(value).map(({ type, value }) => {\n    if (type in DEFAULT_FORMAT) return DEFAULT_FORMAT[(type as keyof typeof DEFAULT_FORMAT)]\n\n    return value\n  }).reduce((string, part) => string + part)\n}\n\nexport const currencyParser = (raw_value: string) => (\n  parseInt((raw_value || '0').replace(/[^\\d]/g, ''))\n)\n\nexport const phoneFormatter = (phone?: string | number) => {\n  if (!phone) return ''\n\n  phone = phone.toString()\n  phone = phone.replace(/\\D/g, '')\n  phone = phone.replace(/^(\\d{2})(\\d)/g, '($1) $2')\n\n  return phone.replace(/(\\d)(\\d{4})$/, '$1-$2')\n}\n\nexport const documentFormatter = (document?: string | number) => {\n  if (!document) return ''\n\n  document = document.toString()\n  document = document.replace(/\\D/g, '')\n  if (document.length >= 14) {\n    return document.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d)/g, '$1.$2.$3/$4-$5')\n  }\n\n  return document.replace(/^(\\d{3})(\\d{3})(\\d{3})(\\d)/g, '$1.$2.$3-$4')\n}\n\ntype NumberFormatter = (\n  number: number,\n  options?: { precision?: number, group_separator?: '.' | ',', decimal_separator?: '.' | ',' },\n) => string\n\n/**\n * Função para formatar número.\n * @param {number} number - Número para ser formatado.\n * @param {Object} options - Opções extras que podem ser informadas.\n * @param {number} options.precision - Precisão do número formatado. Valor padrão é 2.\n * @param {string} options.group_separator - Separador de agrupamento. Valor padrão é '.'.\n * @param {string} options.decimal_separator - Separador decimal. Valor padrão é ','.\n */\n\nexport const numberFormatter: NumberFormatter = (number, options = {}) => {\n  const { precision = 2, group_separator = '.', decimal_separator = ',' } = options\n  const formatter = new Intl.NumberFormat(LOCALE, {\n    minimumFractionDigits: precision,\n    maximumFractionDigits: precision,\n  })\n\n  return formatter.formatToParts(number).map(({ type, value }) => {\n    switch (type) {\n      case 'group':\n        return group_separator\n      case 'decimal':\n        return decimal_separator\n      default:\n        return value\n    }\n  }).reduce((string, part) => string + part)\n}\n\ntype PercentageFormatter = (\n  value: number | string,\n  options?: {\n    symbol_position?: 'left' | 'right', precision?: number, group_separator?: '.' | ',', decimal_separator?: '.' | ','\n  },\n) => string\n\n/**\n * Função para formatar número para porcentagem.\n * @param {number | string} raw_value - Número para ser formatado.\n * @param {Object} options - Opções extras que podem ser informadas.\n * @param {number} options.precision - Precisão do número formatado. Valor padrão é 2.\n * @param {string} options.symbol_position - Posição do simbolo. Valor padrão é 'left'.\n * @param {string} options.group_separator - Separador de agrupamento. Valor padrão é '.'.\n * @param {string} options.decimal_separator - Separador decimal. Valor padrão é ','.\n */\n\nexport const percentageFormatter: PercentageFormatter = (raw_value, options = {}) => {\n  const { symbol_position = 'left', precision = 2, group_separator = '.', decimal_separator = ',' } = options\n  const value = parseFloat(`${raw_value}`) || 0\n\n  const prefix = symbol_position === 'left' ? '% ' : ''\n  const suffix = symbol_position === 'right' ? '%' : ''\n  const number = numberFormatter(value, { precision, group_separator, decimal_separator })\n\n  return `${prefix}${number}${suffix}`\n}\n\nexport const capitalize = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1)\n\n\nconst MOMENT_FORMAT = 'YYYY/MM/DD'\nconst DEFAULT_FORMAT = 'DD/MM/YYYY'\n\nexport const renderDate = (date?: string | null) => date ? moment(date, MOMENT_FORMAT).format(DEFAULT_FORMAT) : undefined\n"]},"metadata":{},"sourceType":"module"}