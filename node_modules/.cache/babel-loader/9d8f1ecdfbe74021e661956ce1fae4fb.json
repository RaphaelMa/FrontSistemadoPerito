{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/** Used to detect unsigned integer values. */\n\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\n\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n}\n\nmodule.exports = isIndex;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(MAX_SAFE_INTEGER, \"MAX_SAFE_INTEGER\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/lodash/_isIndex.js\");\n  reactHotLoader.register(reIsUint, \"reIsUint\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/lodash/_isIndex.js\");\n  reactHotLoader.register(isIndex, \"isIndex\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/lodash/_isIndex.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/lodash/_isIndex.js"],"names":["MAX_SAFE_INTEGER","reIsUint","isIndex","value","length","type","test","module","exports"],"mappings":";;;;;;;;;AAAA;AACA,IAAIA,gBAAgB,GAAG,gBAAvB;AAEA;;AACA,IAAIC,QAAQ,GAAG,kBAAf;AAEA;;;;;;;;;AAQA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,MAAIC,IAAI,GAAG,OAAOF,KAAlB;AACAC,EAAAA,MAAM,GAAGA,MAAM,IAAI,IAAV,GAAiBJ,gBAAjB,GAAoCI,MAA7C;AAEA,SAAO,CAAC,CAACA,MAAF,KACJC,IAAI,IAAI,QAAR,IACEA,IAAI,IAAI,QAAR,IAAoBJ,QAAQ,CAACK,IAAT,CAAcH,KAAd,CAFlB,KAGAA,KAAK,GAAG,CAAC,CAAT,IAAcA,KAAK,GAAG,CAAR,IAAa,CAA3B,IAAgCA,KAAK,GAAGC,MAH/C;AAID;;AAEDG,MAAM,CAACC,OAAP,GAAiBN,OAAjB;;;;;;;;;;0BAvBIF,gB;0BAGAC,Q;0BAUKC,O","sourcesContent":["/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n"]},"metadata":{},"sourceType":"script"}