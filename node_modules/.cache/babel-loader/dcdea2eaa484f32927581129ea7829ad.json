{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport useAxios from \"axios-hooks\";\n\nconst useGetTasks = () => useAxios({\n  url: `/task/mode=table`,\n  method: 'GET'\n}, {\n  manual: true\n});\n\n__signature__(useGetTasks, \"useAxios{}\", () => [useAxios]);\n\nconst _default = useGetTasks;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(useGetTasks, \"useGetTasks\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Tasks/List/useGetTasks.ts\");\n  reactHotLoader.register(_default, \"default\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Tasks/List/useGetTasks.ts\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Tasks/List/useGetTasks.ts"],"names":["useAxios","useGetTasks","url","method","manual"],"mappings":";;;;;;;;;AAAA,OAAOA,QAAP,MAAqB,aAArB;;AAsBA,MAAMC,WAAW,GAAG,MAClBD,QAAQ,CAAc;AAAEE,EAAAA,GAAG,EAAG,kBAAR;AAA2BC,EAAAA,MAAM,EAAE;AAAnC,CAAd,EAA0D;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA1D,CADV;;cAAMH,W,uBACJD,Q;;iBAGaC,W;AAAf;;;;;;;;;;0BAJMA,W","sourcesContent":["import useAxios from \"axios-hooks\"\n\nexport type TaskType = {\n  title: string,\n  column_description: string,\n  process_number?: string,\n  user_name?: string,\n  description: string,\n  deliveryDate: string,\n  finishedDate?: string | null,\n  finished: boolean,\n  _id: string,\n  createAt: string,\n  column_id: string,\n  process_id?: string,\n  user_id?: string,\n}\n\ntype DataPayload = {\n  task: TaskType[],\n}\n\nconst useGetTasks = () => (\n  useAxios<DataPayload>({ url: `/task/mode=table`, method: 'GET' }, { manual: true })\n)\n\nexport default useGetTasks\n"]},"metadata":{},"sourceType":"module"}