{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Tasks/Kanban/Tasks.tsx\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { memo, useState, useCallback, useRef, useEffect, useMemo } from 'react';\nimport { isEqual, cloneDeep } from 'lodash';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport TaskModal from 'Components/Modals/TaskModal/TaskModal';\nimport TaskColumnModal from 'Components/Modals/TaskColumn/TaskColumnModal';\nimport useSaveTask from 'Components/Modals/TaskModal/useSaveTask';\nimport useGetBoard from './useGetBoard';\nimport styled from 'styled-components';\nimport Column from './Column/Column';\nimport Header from './Header';\nimport moment from 'moment';\nimport useDeleteColumn from './useDeleteColumn';\nimport messageError from 'Utils/messageError';\n\nconst Tasks = () => {\n  const taskModalRef = useRef(null);\n  const taskColumnModalRef = useRef(null);\n  const [columns, setColumns] = useState([]);\n  const [filters, setFilters] = useState({});\n  const [saveTask] = useSaveTask();\n  const [, getBoardData] = useGetBoard();\n  const [deleteColumn] = useDeleteColumn();\n  const loadBoard = useCallback(async () => {\n    const {\n      data\n    } = await getBoardData();\n    setColumns(data.task);\n  }, [getBoardData]);\n  useEffect(() => {\n    loadBoard(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const openTaskModal = useCallback(task_id => {\n    var _taskModalRef$current;\n\n    (_taskModalRef$current = taskModalRef.current) === null || _taskModalRef$current === void 0 ? void 0 : _taskModalRef$current.open(task_id);\n  }, []);\n  const openColumnModal = useCallback((id, name) => {\n    var _taskColumnModalRef$c;\n\n    (_taskColumnModalRef$c = taskColumnModalRef.current) === null || _taskColumnModalRef$c === void 0 ? void 0 : _taskColumnModalRef$c.open(id, name);\n  }, []);\n  const save = useCallback(async (task, old_columns, new_columns) => {\n    setColumns(new_columns);\n\n    try {\n      const {\n        data\n      } = await saveTask(task);\n      const {\n        success\n      } = data || {};\n      if (success) return;\n      setColumns(old_columns);\n    } catch (error) {\n      setColumns(old_columns);\n    }\n  }, [saveTask]);\n  const onDragEnd = useCallback(result => {\n    const {\n      destination,\n      source\n    } = result;\n    if (!destination || isEqual(destination, source)) return;\n    const origin_index = columns.findIndex(column => column.column_id === source.droppableId);\n    const destination_index = columns.findIndex(column => column.column_id === destination.droppableId);\n    if (origin_index === -1 || destination_index === -1) return;\n    const new_columns = cloneDeep(columns);\n    const task = new_columns[origin_index].tasks.splice(source.index, 1)[0];\n    task.column_id = columns[destination_index].column_id;\n    task.column_description = columns[destination_index].description;\n    new_columns[destination_index].tasks.splice(destination.index, 0, task);\n    save(task, columns, new_columns);\n  }, [columns, save]);\n  const afterSaveTask = useCallback(async (task, old_column_id) => {\n    // const { column_id } = task\n    // const destination_index = columns.findIndex(column => column.column_id === column_id)\n    // if (destination_index === -1) return\n    // const new_columns = cloneDeep(columns)\n    // // Remove da coluna antiga quando o id da coluna Ã© editado\n    // if (old_column_id && old_column_id !== column_id) {\n    //   const origin_index = columns.findIndex(column => column.column_id === old_column_id)\n    //   const task_index = new_columns[origin_index].tasks.findIndex(t => t._id === task._id)\n    //   if (origin_index !== -1 && task_index !== -1) {\n    //     new_columns[origin_index].tasks.splice(task_index, 1)\n    //   }\n    // }\n    // const task_index = new_columns[destination_index].tasks.findIndex(t => t._id === task._id)\n    // if (task_index === -1) {\n    //   new_columns[destination_index].tasks.push(task)\n    // } else {\n    //   new_columns[destination_index].tasks[task_index] = task\n    // }\n    // setColumns(new_columns)\n    loadBoard();\n  }, [loadBoard]);\n  const afterSaveColumn = useCallback(column => {\n    // const new_columns = cloneDeep(columns)\n    // const colum_index = new_columns.findIndex(c => c.column_id === column._id)\n    // // Nova coluna\n    // if (colum_index === -1) {\n    //   new_columns.push({ column_id: column._id, description: column.description, order: column.order, tasks: [] })\n    // // Atualizando coluna\n    // } else {\n    //   new_columns[colum_index].description = column.description\n    //   new_columns[colum_index].order = column.order\n    // }\n    // setColumns(new_columns)\n    loadBoard();\n  }, [loadBoard]);\n  const afterDeleteTask = useCallback((colum_id, task_id) => {\n    const origin_index = columns.findIndex(column => column.column_id === colum_id);\n    if (origin_index === -1) return;\n    const task_index = columns[origin_index].tasks.findIndex(task => task._id === task_id);\n    if (task_index === -1) return;\n    const new_columns = cloneDeep(columns);\n    new_columns[origin_index].tasks.splice(task_index, 1);\n    setColumns(new_columns);\n  }, [columns]);\n  const handleDeleteColumn = useCallback(async id => {\n    const new_columns = cloneDeep(columns);\n    const colum_index = new_columns.findIndex(column => column.column_id === id);\n    if (colum_index === -1) return;\n    new_columns.splice(colum_index, 1);\n\n    try {\n      const {\n        data\n      } = await deleteColumn(id);\n      const {\n        success\n      } = data || {};\n\n      if (!success) {\n        messageError('2020106031740');\n        return;\n      }\n\n      setColumns(new_columns);\n    } catch (error) {\n      messageError('2020106031740');\n    }\n  }, [columns, deleteColumn]);\n  const filtered_columns = useMemo(() => {\n    let filtered_columns = columns;\n\n    if (!!filters.column_id) {\n      filtered_columns = columns.filter(column => column.column_id === filters.column_id);\n    }\n\n    return filtered_columns.map(column => {\n      const {\n        tasks,\n        ...rest\n      } = column;\n      const filtered_tasks = tasks.filter(task => {\n        if (filters.start_date && moment(task.deliveryDate, 'YYYY-MM-DD').isBefore(filters.start_date)) return false;\n        if (filters.end_date && moment(task.deliveryDate, 'YYYY-MM-DD').isAfter(filters.end_date)) return false;\n        if (filters.finished !== undefined && filters.finished !== task.finished) return false;\n        if (filters.process_id && filters.process_id !== task.process_id) return false;\n        if (filters.user_id && filters.user_id !== task.user_id) return false;\n        return true;\n      });\n      return { ...rest,\n        tasks: filtered_tasks\n      };\n    });\n  }, [columns, filters]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    openTaskModal: openTaskModal,\n    openColumnModal: openColumnModal,\n    setFilters: setFilters,\n    type: \"kanban\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(BoardContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, filtered_columns.map(column => /*#__PURE__*/React.createElement(Column, {\n    key: column.column_id,\n    column_id: column.column_id,\n    title: column.description,\n    tasks: column.tasks,\n    index: 1,\n    openColumnModal: openColumnModal,\n    deleteColumn: handleDeleteColumn,\n    openTaskModal: openTaskModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(TaskModal, {\n    ref: taskModalRef,\n    afterSave: afterSaveTask,\n    afterDeleteTask: afterDeleteTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TaskColumnModal, {\n    ref: taskColumnModalRef,\n    afterSave: afterSaveColumn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }));\n};\n\n__signature__(Tasks, \"useRef{taskModalRef}\\nuseRef{taskColumnModalRef}\\nuseState{[columns, setColumns]([])}\\nuseState{[filters, setFilters]({})}\\nuseSaveTask{[saveTask]}\\nuseGetBoard{[, getBoardData]}\\nuseDeleteColumn{[deleteColumn]}\\nuseCallback{loadBoard}\\nuseEffect{}\\nuseCallback{openTaskModal: TaskModalType['open']}\\nuseCallback{openColumnModal: TaskColumnModalType['open']}\\nuseCallback{save}\\nuseCallback{onDragEnd}\\nuseCallback{afterSaveTask}\\nuseCallback{afterSaveColumn}\\nuseCallback{afterDeleteTask}\\nuseCallback{handleDeleteColumn}\\nuseMemo{filtered_columns}\", () => [useSaveTask, useGetBoard, useDeleteColumn]);\n\nTasks.displayName = \"Tasks\";\n\nconst _default = memo(Tasks);\n\nexport default _default;\nconst Container = styled.div.withConfig({\n  displayName: \"Tasks__Container\",\n  componentId: \"sc-1wexptd-0\"\n})([\"height:100%;width:100%;\"]);\nconst BoardContainer = styled.div.withConfig({\n  displayName: \"Tasks__BoardContainer\",\n  componentId: \"sc-1wexptd-1\"\n})([\"display:flex;flex-flow:row nowrap;height:calc(100vh - 50px - 42px);width:100%;overflow-x:scroll;overflow-y:hidden;&::-webkit-scrollbar{height:9px;}&::-webkit-scrollbar-track{background:transparent;}&::-webkit-scrollbar-thumb{background-color:\", \";border-radius:20px;}scrollbar-width:9;scrollbar-color:\", \";\"], p => p.theme.colors.dark_gray, p => p.theme.colors.dark_gray);\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Tasks, \"Tasks\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Tasks/Kanban/Tasks.tsx\");\n  reactHotLoader.register(Container, \"Container\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Tasks/Kanban/Tasks.tsx\");\n  reactHotLoader.register(BoardContainer, \"BoardContainer\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Tasks/Kanban/Tasks.tsx\");\n  reactHotLoader.register(_default, \"default\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Tasks/Kanban/Tasks.tsx\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Tasks/Kanban/Tasks.tsx"],"names":["React","memo","useState","useCallback","useRef","useEffect","useMemo","isEqual","cloneDeep","DragDropContext","TaskModal","TaskColumnModal","useSaveTask","useGetBoard","styled","Column","Header","moment","useDeleteColumn","messageError","Tasks","taskModalRef","taskColumnModalRef","columns","setColumns","filters","setFilters","saveTask","getBoardData","deleteColumn","loadBoard","data","task","openTaskModal","task_id","current","open","openColumnModal","id","name","save","old_columns","new_columns","success","error","onDragEnd","result","destination","source","origin_index","findIndex","column","column_id","droppableId","destination_index","tasks","splice","index","column_description","description","afterSaveTask","old_column_id","afterSaveColumn","afterDeleteTask","colum_id","task_index","_id","handleDeleteColumn","colum_index","filtered_columns","filter","map","rest","filtered_tasks","start_date","deliveryDate","isBefore","end_date","isAfter","finished","undefined","process_id","user_id","Container","div","BoardContainer","p","theme","colors","dark_gray"],"mappings":"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","sourcesContent":["import React, { memo, useState, useCallback, useRef, useEffect, useMemo } from 'react'\nimport { isEqual, cloneDeep } from 'lodash'\nimport { ColumnType, FiltersType } from './Types'\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd'\nimport { TaskType as ModalTaskType } from 'Components/Modals/TaskModal/Types'\nimport TaskModal, { TaskModalType } from 'Components/Modals/TaskModal/TaskModal'\nimport TaskColumnModal, { TaskColumnModalType } from 'Components/Modals/TaskColumn/TaskColumnModal'\nimport useSaveTask from 'Components/Modals/TaskModal/useSaveTask'\nimport useGetBoard from './useGetBoard'\nimport styled from 'styled-components'\nimport Column from './Column/Column'\nimport Header from './Header'\nimport moment from 'moment'\nimport useDeleteColumn from './useDeleteColumn'\nimport messageError from 'Utils/messageError'\n\nconst Tasks: React.FC = () => {\n  const taskModalRef = useRef<TaskModalType>(null)\n  const taskColumnModalRef = useRef<TaskColumnModalType>(null)\n\n  const [columns, setColumns] = useState<ColumnType[]>([])\n  const [filters, setFilters] = useState<FiltersType>({})\n\n  const [saveTask] = useSaveTask()\n  const [, getBoardData] = useGetBoard()\n  const [deleteColumn] = useDeleteColumn()\n\n  const loadBoard = useCallback(async () => {\n    const { data } = await getBoardData()\n    setColumns(data.task)\n  }, [getBoardData])\n\n  useEffect(() => {\n    loadBoard()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const openTaskModal: TaskModalType['open'] = useCallback((task_id) => {\n    taskModalRef.current?.open(task_id)\n  }, [])\n\n  const openColumnModal: TaskColumnModalType['open'] = useCallback((id, name) => {\n    taskColumnModalRef.current?.open(id, name)\n  }, [])\n\n  const save = useCallback(async (task: ModalTaskType, old_columns: ColumnType[], new_columns: ColumnType[]) => {\n    setColumns(new_columns)\n\n    try {\n      const { data } = await saveTask(task)\n      const { success } = data || {}\n\n      if (success) return\n\n      setColumns(old_columns)\n    } catch (error) {\n      setColumns(old_columns)\n    }\n  }, [saveTask])\n\n  const onDragEnd = useCallback((result: DropResult) => {\n    const { destination, source } = result\n\n    if (!destination || isEqual(destination, source)) return\n\n    const origin_index = columns.findIndex(column => column.column_id === source.droppableId)\n    const destination_index = columns.findIndex(column => column.column_id === destination.droppableId)\n\n    if (origin_index === -1 || destination_index === -1) return\n\n    const new_columns = cloneDeep(columns)\n    const task = new_columns[origin_index].tasks.splice(source.index, 1)[0]\n\n    task.column_id = columns[destination_index].column_id\n    task.column_description = columns[destination_index].description\n\n    new_columns[destination_index].tasks.splice(destination.index, 0, task)\n\n    save(task, columns, new_columns)\n  }, [columns, save])\n\n  const afterSaveTask = useCallback(async (task: ModalTaskType, old_column_id?: string) => {\n    // const { column_id } = task\n    // const destination_index = columns.findIndex(column => column.column_id === column_id)\n    // if (destination_index === -1) return\n\n    // const new_columns = cloneDeep(columns)\n\n    // // Remove da coluna antiga quando o id da coluna Ã© editado\n    // if (old_column_id && old_column_id !== column_id) {\n    //   const origin_index = columns.findIndex(column => column.column_id === old_column_id)\n    //   const task_index = new_columns[origin_index].tasks.findIndex(t => t._id === task._id)\n\n    //   if (origin_index !== -1 && task_index !== -1) {\n    //     new_columns[origin_index].tasks.splice(task_index, 1)\n    //   }\n    // }\n\n    // const task_index = new_columns[destination_index].tasks.findIndex(t => t._id === task._id)\n    // if (task_index === -1) {\n    //   new_columns[destination_index].tasks.push(task)\n    // } else {\n    //   new_columns[destination_index].tasks[task_index] = task\n    // }\n\n    // setColumns(new_columns)\n\n    loadBoard()\n  }, [loadBoard])\n\n  const afterSaveColumn = useCallback((column: { description: string, _id: string, order: number }) => {\n    // const new_columns = cloneDeep(columns)\n    // const colum_index = new_columns.findIndex(c => c.column_id === column._id)\n\n    // // Nova coluna\n    // if (colum_index === -1) {\n    //   new_columns.push({ column_id: column._id, description: column.description, order: column.order, tasks: [] })\n    // // Atualizando coluna\n    // } else {\n    //   new_columns[colum_index].description = column.description\n    //   new_columns[colum_index].order = column.order\n    // }\n\n    // setColumns(new_columns)\n\n    loadBoard()\n  }, [loadBoard])\n\n  const afterDeleteTask = useCallback((colum_id: string, task_id: string) => {\n    const origin_index = columns.findIndex(column => column.column_id === colum_id)\n    if (origin_index === -1) return\n\n    const task_index = columns[origin_index].tasks.findIndex(task => task._id === task_id)\n    if (task_index === -1) return\n\n    const new_columns = cloneDeep(columns)\n    new_columns[origin_index].tasks.splice(task_index, 1)\n\n    setColumns(new_columns)\n  }, [columns])\n\n  const handleDeleteColumn = useCallback(async (id: string) => {\n    const new_columns = cloneDeep(columns)\n    const colum_index = new_columns.findIndex(column => column.column_id === id)\n\n    if (colum_index === -1) return\n\n    new_columns.splice(colum_index, 1)\n\n    try {\n      const { data } = await deleteColumn(id)\n      const { success } = data || {}\n\n      if (!success) {\n        messageError('2020106031740')\n        return\n      }\n\n      setColumns(new_columns)\n    } catch (error) {\n      messageError('2020106031740')\n    }\n  }, [columns, deleteColumn])\n\n  const filtered_columns = useMemo(() => {\n    let filtered_columns: ColumnType[] = columns\n\n    if (!!filters.column_id) {\n      filtered_columns = columns.filter(column => column.column_id === filters.column_id)\n    }\n\n    return filtered_columns.map(column => {\n      const { tasks, ...rest } = column\n\n      const filtered_tasks = tasks.filter(task => {\n        if (filters.start_date && moment(task.deliveryDate, 'YYYY-MM-DD').isBefore(filters.start_date)) return false\n        if (filters.end_date && moment(task.deliveryDate, 'YYYY-MM-DD').isAfter(filters.end_date)) return false\n        if (filters.finished !== undefined && filters.finished !== task.finished) return false\n        if (filters.process_id && filters.process_id !== task.process_id) return false\n        if (filters.user_id && filters.user_id !== task.user_id) return false\n\n        return true\n      })\n\n      return { ...rest, tasks: filtered_tasks }\n    })\n  }, [columns, filters])\n\n  return (\n    <Container>\n      <Header\n        openTaskModal={openTaskModal}\n        openColumnModal={openColumnModal}\n        setFilters={setFilters}\n        type=\"kanban\"\n      />\n      <BoardContainer>\n        <DragDropContext onDragEnd={onDragEnd}>\n          {filtered_columns.map(column => (\n            <Column\n              key={column.column_id}\n              column_id={column.column_id}\n              title={column.description}\n              tasks={column.tasks}\n              index={1}\n              openColumnModal={openColumnModal}\n              deleteColumn={handleDeleteColumn}\n              openTaskModal={openTaskModal}\n            />\n          ))}\n        </DragDropContext>\n      </BoardContainer>\n\n      <TaskModal ref={taskModalRef} afterSave={afterSaveTask} afterDeleteTask={afterDeleteTask}/>\n\n      <TaskColumnModal ref={taskColumnModalRef} afterSave={afterSaveColumn}/>\n    </Container>\n  )\n}\n\nexport default memo(Tasks)\n\nconst Container = styled.div`\n  height: 100%;\n  width: 100%;\n`\n\nconst BoardContainer = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  /* 50px do header, 42px do header do board, */\n  height: calc(100vh - 50px - 42px);\n  width: 100%;\n  overflow-x: scroll;\n  overflow-y: hidden;\n\n  &::-webkit-scrollbar {\n    height: 9px;               /* height of the entire scrollbar */\n  }\n\n  &::-webkit-scrollbar-track {\n    background: transparent;        /* color of the tracking area */\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background-color: ${p => p.theme.colors.dark_gray};    /* color of the scroll thumb */\n    border-radius: 20px;       /* roundness of the scroll thumb */\n  }\n\n  /* Scrollbars in Firefox */\n  scrollbar-width: 9;\n  scrollbar-color: ${p => p.theme.colors.dark_gray};\n`\n"]},"metadata":{},"sourceType":"module"}