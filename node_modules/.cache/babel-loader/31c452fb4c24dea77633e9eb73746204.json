{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nexport function isPlainObject(item) {\n  return item !== null && typeof item === 'object' && item.constructor === Object;\n}\nexport default function deepmerge(target, source, options = {\n  clone: true\n}) {\n  const output = options.clone ? _extends({}, target) : target;\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      // Avoid prototype pollution\n      if (key === '__proto__') {\n        return;\n      }\n\n      if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {\n        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.\n        output[key] = deepmerge(target[key], source[key], options);\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n\n  return output;\n}\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(isPlainObject, \"isPlainObject\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/@mui/utils/esm/deepmerge.js\");\n  reactHotLoader.register(deepmerge, \"deepmerge\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/@mui/utils/esm/deepmerge.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/@mui/utils/esm/deepmerge.js"],"names":["_extends","isPlainObject","item","constructor","Object","deepmerge","target","source","options","clone","output","keys","forEach","key"],"mappings":";;;;;;;;;AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,SAAOA,IAAI,KAAK,IAAT,IAAiB,OAAOA,IAAP,KAAgB,QAAjC,IAA6CA,IAAI,CAACC,WAAL,KAAqBC,MAAzE;AACD;AACD,eAAe,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,MAA3B,EAAmCC,OAAO,GAAG;AAC1DC,EAAAA,KAAK,EAAE;AADmD,CAA7C,EAEZ;AACD,QAAMC,MAAM,GAAGF,OAAO,CAACC,KAAR,GAAgBT,QAAQ,CAAC,EAAD,EAAKM,MAAL,CAAxB,GAAuCA,MAAtD;;AAEA,MAAIL,aAAa,CAACK,MAAD,CAAb,IAAyBL,aAAa,CAACM,MAAD,CAA1C,EAAoD;AAClDH,IAAAA,MAAM,CAACO,IAAP,CAAYJ,MAAZ,EAAoBK,OAApB,CAA4BC,GAAG,IAAI;AACjC;AACA,UAAIA,GAAG,KAAK,WAAZ,EAAyB;AACvB;AACD;;AAED,UAAIZ,aAAa,CAACM,MAAM,CAACM,GAAD,CAAP,CAAb,IAA8BA,GAAG,IAAIP,MAArC,IAA+CL,aAAa,CAACK,MAAM,CAACO,GAAD,CAAP,CAAhE,EAA+E;AAC7E;AACAH,QAAAA,MAAM,CAACG,GAAD,CAAN,GAAcR,SAAS,CAACC,MAAM,CAACO,GAAD,CAAP,EAAcN,MAAM,CAACM,GAAD,CAApB,EAA2BL,OAA3B,CAAvB;AACD,OAHD,MAGO;AACLE,QAAAA,MAAM,CAACG,GAAD,CAAN,GAAcN,MAAM,CAACM,GAAD,CAApB;AACD;AACF,KAZD;AAaD;;AAED,SAAOH,MAAP;AACD;;;;;;;;;;0BAzBeT,a;0BAGQI,S","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport function isPlainObject(item) {\n  return item !== null && typeof item === 'object' && item.constructor === Object;\n}\nexport default function deepmerge(target, source, options = {\n  clone: true\n}) {\n  const output = options.clone ? _extends({}, target) : target;\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      // Avoid prototype pollution\n      if (key === '__proto__') {\n        return;\n      }\n\n      if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {\n        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.\n        output[key] = deepmerge(target[key], source[key], options);\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n\n  return output;\n}"]},"metadata":{},"sourceType":"module"}