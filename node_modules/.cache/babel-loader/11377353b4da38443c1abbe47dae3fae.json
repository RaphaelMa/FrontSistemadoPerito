{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport useAxios from 'axios-hooks';\n\nconst useGetCompanies = query_options => useAxios({\n  url: '/multicompany',\n  method: 'GET'\n}, {\n  useCache: false,\n  ...query_options\n});\n\n__signature__(useGetCompanies, \"useAxios{}\", () => [useAxios]);\n\nconst _default = useGetCompanies;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(useGetCompanies, \"useGetCompanies\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Components/Inputs/CompanyInput/useGetCompanies.ts\");\n  reactHotLoader.register(_default, \"default\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Components/Inputs/CompanyInput/useGetCompanies.ts\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Components/Inputs/CompanyInput/useGetCompanies.ts"],"names":["useAxios","useGetCompanies","query_options","url","method","useCache"],"mappings":";;;;;;;;;AAAA,OAAOA,QAAP,MAAkC,aAAlC;;AAQA,MAAMC,eAAe,GAAIC,aAAD,IACtBF,QAAQ,CAAuB;AAAEG,EAAAA,GAAG,EAAE,eAAP;AAAwBC,EAAAA,MAAM,EAAE;AAAhC,CAAvB,EAAgE;AAAEC,EAAAA,QAAQ,EAAE,KAAZ;AAAmB,KAAGH;AAAtB,CAAhE,CADV;;cAAMD,e,uBACJD,Q;;iBAGaC,e;AAAf;;;;;;;;;;0BAJMA,e","sourcesContent":["import useAxios, { Options } from 'axios-hooks'\n\ntype MultiCompaniesType = {\n  _id: string,\n  description: string,\n}\n\n\nconst useGetCompanies = (query_options?: Options) => (\n  useAxios<MultiCompaniesType[]>({ url: '/multicompany', method: 'GET' }, { useCache: false, ...query_options })\n)\n\nexport default useGetCompanies\n"]},"metadata":{},"sourceType":"module"}