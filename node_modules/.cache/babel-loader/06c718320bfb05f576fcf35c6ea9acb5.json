{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Components/Modals/Schedule/ScheduleModal.tsx\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { forwardRef, useCallback, useImperativeHandle, useState } from 'react';\nimport { Form, message, Modal, Spin } from 'antd';\nimport { normalizeData } from './functions';\nimport useUpdateScheduleStatus from './useUpdateScheduleStatus';\nimport useGetProcessData from './useGetProcessData';\nimport successModal from 'Utils/successModal';\nimport useGetStatus from './useGetStatus';\nimport Content from './Content/Content';\nimport messageError from 'Utils/messageError';\n\nconst ScheduleModal = ({\n  afterSave\n}, ref) => {\n  const [visible, setVisible] = useState(false);\n  const [loading, getProcessData] = useGetProcessData();\n  const [status_arr, setStatusArr] = useState([]);\n  const [form] = Form.useForm();\n  const {\n    setFieldsValue,\n    getFieldValue\n  } = form;\n  const schedule_id = getFieldValue(['schedule', '_id']);\n  const [{\n    loading: status_loading\n  }, getStatus] = useGetStatus();\n  const [saving, saveProcess] = useUpdateScheduleStatus(schedule_id);\n  const fetchStatus = useCallback(async () => {\n    try {\n      const {\n        data\n      } = await getStatus();\n      if (!(data === null || data === void 0 ? void 0 : data.length)) return;\n      setStatusArr(data);\n    } catch (_e) {\n      messageError('2010110147');\n    }\n  }, [getStatus]);\n  const fetchProcessData = useCallback(async id => {\n    try {\n      const {\n        data\n      } = await getProcessData(id);\n\n      if (!(data === null || data === void 0 ? void 0 : data.success)) {\n        message.error(data.message);\n        return;\n      }\n\n      const normalized_data = normalizeData(data);\n      setFieldsValue(normalized_data);\n    } catch (error) {\n      message.error('Não foi possível carregar os dados do processo. Recarregue a página e tente novamente. ' + 'Se persistir o erro entre em contato conosco pelo código:2010202212');\n    }\n  }, [getProcessData, setFieldsValue]);\n\n  const open = async process_id => {\n    await fetchProcessData(process_id);\n    await fetchStatus();\n    setVisible(true);\n  };\n\n  const close = () => {\n    setVisible(false);\n  };\n\n  const handleOpenProcess = useCallback(() => {\n    const process_id = getFieldValue(['processData', '_id']);\n    window.open(`/process/${process_id}`);\n    setTimeout(() => close(), 500);\n  }, [getFieldValue]);\n  const handleUpdateStatus = useCallback(async status_id => {\n    try {\n      const {\n        data\n      } = await saveProcess(status_id);\n\n      if (!data.success) {\n        message.error(data.message);\n        return;\n      }\n\n      successModal({\n        content: 'Status atualizado com sucesso'\n      });\n      afterSave === null || afterSave === void 0 ? void 0 : afterSave();\n    } catch (e) {\n      message.error('Não foi possível salvar o status do agendamento. Recarregue a página e tente novamente. ' + 'Se persistir o erro entre em contato conosco pelo código:1110200326');\n    }\n  }, [afterSave, saveProcess]);\n  useImperativeHandle(ref, () => ({\n    open,\n    close\n  }));\n  return /*#__PURE__*/React.createElement(Modal, {\n    visible: visible,\n    closable: false,\n    okText: \"Ir para Processo\",\n    cancelText: \"Fechar\",\n    onOk: handleOpenProcess,\n    onCancel: close,\n    centered: true,\n    width: \"95%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Spin, {\n    spinning: loading || status_loading || saving,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Content, {\n    form: form,\n    status_arr: status_arr,\n    handleUpdateStatus: handleUpdateStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  })));\n};\n\n__signature__(ScheduleModal, \"useState{[visible, setVisible](false)}\\nuseGetProcessData{[loading, getProcessData]}\\nuseState{[status_arr, setStatusArr]([])}\\nuseForm{[form]}\\nuseGetStatus{[{ loading: status_loading }, getStatus]}\\nuseUpdateScheduleStatus{[saving, saveProcess]}\\nuseCallback{fetchStatus}\\nuseCallback{fetchProcessData}\\nuseCallback{handleOpenProcess}\\nuseCallback{handleUpdateStatus}\\nuseImperativeHandle{}\", () => [useGetProcessData, useGetStatus, useUpdateScheduleStatus, useImperativeHandle]);\n\nScheduleModal.displayName = \"ScheduleModal\";\n\nconst _default = forwardRef(ScheduleModal);\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(ScheduleModal, \"ScheduleModal\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Components/Modals/Schedule/ScheduleModal.tsx\");\n  reactHotLoader.register(_default, \"default\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Components/Modals/Schedule/ScheduleModal.tsx\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Components/Modals/Schedule/ScheduleModal.tsx"],"names":["React","forwardRef","useCallback","useImperativeHandle","useState","Form","message","Modal","Spin","normalizeData","useUpdateScheduleStatus","useGetProcessData","successModal","useGetStatus","Content","messageError","ScheduleModal","afterSave","ref","visible","setVisible","loading","getProcessData","status_arr","setStatusArr","form","useForm","setFieldsValue","getFieldValue","schedule_id","status_loading","getStatus","saving","saveProcess","fetchStatus","data","length","_e","fetchProcessData","id","success","error","normalized_data","open","process_id","close","handleOpenProcess","window","setTimeout","handleUpdateStatus","status_id","content","e"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,WAA5B,EAAyCC,mBAAzC,EAA8DC,QAA9D,QAA8E,OAA9E;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,KAAxB,EAA+BC,IAA/B,QAA2C,MAA3C;AACA,SAASC,aAAT,QAA8B,aAA9B;AAEA,OAAOC,uBAAP,MAAoC,2BAApC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;;AAaA,MAAMC,aAAuE,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,EAAgBC,GAAhB,KAAwB;AACtG,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACiB,OAAD,EAAUC,cAAV,IAA4BX,iBAAiB,EAAnD;AACA,QAAM,CAACY,UAAD,EAAaC,YAAb,IAA6BpB,QAAQ,CAAW,EAAX,CAA3C;AAEA,QAAM,CAACqB,IAAD,IAASpB,IAAI,CAACqB,OAAL,EAAf;AACA,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAAoCH,IAA1C;AACA,QAAMI,WAAW,GAAGD,aAAa,CAAC,CAAC,UAAD,EAAa,KAAb,CAAD,CAAjC;AAEA,QAAM,CAAC;AAAEP,IAAAA,OAAO,EAAES;AAAX,GAAD,EAA8BC,SAA9B,IAA2ClB,YAAY,EAA7D;AACA,QAAM,CAACmB,MAAD,EAASC,WAAT,IAAwBvB,uBAAuB,CAACmB,WAAD,CAArD;AAEA,QAAMK,WAAW,GAAGhC,WAAW,CAAC,YAAY;AAC1C,QAAI;AACF,YAAM;AAAEiC,QAAAA;AAAF,UAAW,MAAMJ,SAAS,EAAhC;AAEA,UAAI,EAACI,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEC,MAAP,CAAJ,EAAmB;AAEnBZ,MAAAA,YAAY,CAACW,IAAD,CAAZ;AACD,KAND,CAME,OAAOE,EAAP,EAAW;AACXtB,MAAAA,YAAY,CAAC,YAAD,CAAZ;AACD;AACF,GAV8B,EAU5B,CAACgB,SAAD,CAV4B,CAA/B;AAYA,QAAMO,gBAAgB,GAAGpC,WAAW,CAAC,MAAOqC,EAAP,IAAsB;AACzD,QAAI;AACF,YAAM;AAAEJ,QAAAA;AAAF,UAAW,MAAMb,cAAc,CAACiB,EAAD,CAArC;;AAEA,UAAI,EAACJ,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEK,OAAP,CAAJ,EAAoB;AAClBlC,QAAAA,OAAO,CAACmC,KAAR,CAAcN,IAAI,CAAC7B,OAAnB;AACA;AACD;;AAED,YAAMoC,eAAe,GAAGjC,aAAa,CAAC0B,IAAD,CAArC;AAEAR,MAAAA,cAAc,CAACe,eAAD,CAAd;AACD,KAXD,CAWE,OAAOD,KAAP,EAAc;AACdnC,MAAAA,OAAO,CAACmC,KAAR,CAAc,4FACZ,qEADF;AAED;AACF,GAhBmC,EAgBjC,CAACnB,cAAD,EAAiBK,cAAjB,CAhBiC,CAApC;;AAkBA,QAAMgB,IAAU,GAAG,MAAOC,UAAP,IAAsB;AACvC,UAAMN,gBAAgB,CAACM,UAAD,CAAtB;AACA,UAAMV,WAAW,EAAjB;AAEAd,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GALD;;AAOA,QAAMyB,KAAK,GAAG,MAAM;AAClBzB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAFD;;AAIA,QAAM0B,iBAAiB,GAAG5C,WAAW,CAAC,MAAM;AAC1C,UAAM0C,UAAU,GAAGhB,aAAa,CAAC,CAAC,aAAD,EAAgB,KAAhB,CAAD,CAAhC;AACAmB,IAAAA,MAAM,CAACJ,IAAP,CAAa,YAAWC,UAAW,EAAnC;AACAI,IAAAA,UAAU,CAAC,MAAMH,KAAK,EAAZ,EAAgB,GAAhB,CAAV;AACD,GAJoC,EAIlC,CAACjB,aAAD,CAJkC,CAArC;AAMA,QAAMqB,kBAAkB,GAAG/C,WAAW,CAAC,MAAOgD,SAAP,IAA6B;AAClE,QAAI;AACF,YAAM;AAAEf,QAAAA;AAAF,UAAW,MAAMF,WAAW,CAACiB,SAAD,CAAlC;;AAEA,UAAI,CAACf,IAAI,CAACK,OAAV,EAAmB;AACjBlC,QAAAA,OAAO,CAACmC,KAAR,CAAcN,IAAI,CAAC7B,OAAnB;AACA;AACD;;AAEDM,MAAAA,YAAY,CAAC;AAAEuC,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAZ;AACAlC,MAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS;AACV,KAVD,CAUE,OAAOmC,CAAP,EAAU;AACV9C,MAAAA,OAAO,CAACmC,KAAR,CAAc,6FACZ,qEADF;AAED;AACF,GAfqC,EAenC,CAACxB,SAAD,EAAYgB,WAAZ,CAfmC,CAAtC;AAiBA9B,EAAAA,mBAAmB,CAACe,GAAD,EAAM,OAAO;AAAEyB,IAAAA,IAAF;AAAQE,IAAAA;AAAR,GAAP,CAAN,CAAnB;AAEA,sBACE,oBAAC,KAAD;AACE,IAAA,OAAO,EAAE1B,OADX;AAEE,IAAA,QAAQ,EAAE,KAFZ;AAGE,IAAA,MAAM,EAAC,kBAHT;AAIE,IAAA,UAAU,EAAC,QAJb;AAKE,IAAA,IAAI,EAAE2B,iBALR;AAME,IAAA,QAAQ,EAAED,KANZ;AAOE,IAAA,QAAQ,EAAE,IAPZ;AAQE,IAAA,KAAK,EAAC,KARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAUE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAExB,OAAO,IAAIS,cAAX,IAA6BE,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAEP,IAAf;AAAqB,IAAA,UAAU,EAAEF,UAAjC;AAA6C,IAAA,kBAAkB,EAAE0B,kBAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAVF,CADF;AAgBD,CA9FD;;cAAMjC,a,qZAE8BL,iB,EAOeE,Y,EACnBH,uB,EAkE9BP,mB;;AA5EIa,a;;iBAiGSf,UAAU,CAACe,aAAD,C;;AAAzB;;;;;;;;;;0BAjGMA,a","sourcesContent":["import React, { forwardRef, useCallback, useImperativeHandle, useState } from 'react'\nimport { Form, message, Modal, Spin } from 'antd'\nimport { normalizeData } from './functions'\nimport { Status } from './types'\nimport useUpdateScheduleStatus from './useUpdateScheduleStatus'\nimport useGetProcessData from './useGetProcessData'\nimport successModal from 'Utils/successModal'\nimport useGetStatus from './useGetStatus'\nimport Content from './Content/Content'\nimport messageError from 'Utils/messageError'\n\ntype Open = (process_id: string) => void\n\ntype Props = {\n  afterSave: () => void\n}\n\nexport type ScheduleModalType = {\n  open: Open,\n  close: () => void\n}\n\nconst ScheduleModal: React.ForwardRefRenderFunction<ScheduleModalType, Props> = ({ afterSave }, ref) => {\n  const [visible, setVisible] = useState(false)\n  const [loading, getProcessData] = useGetProcessData()\n  const [status_arr, setStatusArr] = useState<Status[]>([])\n\n  const [form] = Form.useForm()\n  const { setFieldsValue, getFieldValue } = form\n  const schedule_id = getFieldValue(['schedule', '_id']) as string\n\n  const [{ loading: status_loading }, getStatus] = useGetStatus()\n  const [saving, saveProcess] = useUpdateScheduleStatus(schedule_id)\n\n  const fetchStatus = useCallback(async () => {\n    try {\n      const { data } = await getStatus()\n\n      if (!data?.length) return\n\n      setStatusArr(data)\n    } catch (_e) {\n      messageError('2010110147')\n    }\n  }, [getStatus])\n\n  const fetchProcessData = useCallback(async (id: string) => {\n    try {\n      const { data } = await getProcessData(id)\n\n      if (!data?.success) {\n        message.error(data.message)\n        return\n      }\n\n      const normalized_data = normalizeData(data)\n\n      setFieldsValue(normalized_data)\n    } catch (error) {\n      message.error('Não foi possível carregar os dados do processo. Recarregue a página e tente novamente. ' +\n        'Se persistir o erro entre em contato conosco pelo código:2010202212')\n    }\n  }, [getProcessData, setFieldsValue])\n\n  const open: Open = async (process_id) => {\n    await fetchProcessData(process_id)\n    await fetchStatus()\n\n    setVisible(true)\n  }\n\n  const close = () => {\n    setVisible(false)\n  }\n\n  const handleOpenProcess = useCallback(() => {\n    const process_id = getFieldValue(['processData', '_id']) as string\n    window.open(`/process/${process_id}`)\n    setTimeout(() => close(), 500)\n  }, [getFieldValue])\n\n  const handleUpdateStatus = useCallback(async (status_id: string) => {\n    try {\n      const { data } = await saveProcess(status_id)\n\n      if (!data.success) {\n        message.error(data.message)\n        return\n      }\n\n      successModal({ content: 'Status atualizado com sucesso' })\n      afterSave?.()\n    } catch (e) {\n      message.error('Não foi possível salvar o status do agendamento. Recarregue a página e tente novamente. ' +\n        'Se persistir o erro entre em contato conosco pelo código:1110200326')\n    }\n  }, [afterSave, saveProcess])\n\n  useImperativeHandle(ref, () => ({ open, close }))\n\n  return (\n    <Modal\n      visible={visible}\n      closable={false}\n      okText=\"Ir para Processo\"\n      cancelText=\"Fechar\"\n      onOk={handleOpenProcess}\n      onCancel={close}\n      centered={true}\n      width=\"95%\"\n    >\n      <Spin spinning={loading || status_loading || saving}>\n        <Content form={form} status_arr={status_arr} handleUpdateStatus={handleUpdateStatus}/>\n      </Spin>\n    </Modal>\n  )\n}\n\n\nexport default forwardRef(ScheduleModal)\n"]},"metadata":{},"sourceType":"module"}