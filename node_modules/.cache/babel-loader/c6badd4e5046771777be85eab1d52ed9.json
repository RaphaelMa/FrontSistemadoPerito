{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nvar baseRepeat = require('./_baseRepeat'),\n    baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringSize = require('./_stringSize'),\n    stringToArray = require('./_stringToArray');\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\n\nvar nativeCeil = Math.ceil;\n/**\n * Creates the padding for `string` based on `length`. The `chars` string\n * is truncated if the number of characters exceeds `length`.\n *\n * @private\n * @param {number} length The padding length.\n * @param {string} [chars=' '] The string used as padding.\n * @returns {string} Returns the padding for `string`.\n */\n\nfunction createPadding(length, chars) {\n  chars = chars === undefined ? ' ' : baseToString(chars);\n  var charsLength = chars.length;\n\n  if (charsLength < 2) {\n    return charsLength ? baseRepeat(chars, length) : chars;\n  }\n\n  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n  return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);\n}\n\nmodule.exports = createPadding;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(nativeCeil, \"nativeCeil\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/lodash/_createPadding.js\");\n  reactHotLoader.register(createPadding, \"createPadding\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/lodash/_createPadding.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/lodash/_createPadding.js"],"names":["baseRepeat","require","baseToString","castSlice","hasUnicode","stringSize","stringToArray","nativeCeil","Math","ceil","createPadding","length","chars","undefined","charsLength","result","join","slice","module","exports"],"mappings":";;;;;;;;;AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAAxB;AAAA,IACIC,YAAY,GAAGD,OAAO,CAAC,iBAAD,CAD1B;AAAA,IAEIE,SAAS,GAAGF,OAAO,CAAC,cAAD,CAFvB;AAAA,IAGIG,UAAU,GAAGH,OAAO,CAAC,eAAD,CAHxB;AAAA,IAIII,UAAU,GAAGJ,OAAO,CAAC,eAAD,CAJxB;AAAA,IAKIK,aAAa,GAAGL,OAAO,CAAC,kBAAD,CAL3B;AAOA;;;AACA,IAAIM,UAAU,GAAGC,IAAI,CAACC,IAAtB;AAEA;;;;;;;;;;AASA,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,KAA/B,EAAsC;AACpCA,EAAAA,KAAK,GAAGA,KAAK,KAAKC,SAAV,GAAsB,GAAtB,GAA4BX,YAAY,CAACU,KAAD,CAAhD;AAEA,MAAIE,WAAW,GAAGF,KAAK,CAACD,MAAxB;;AACA,MAAIG,WAAW,GAAG,CAAlB,EAAqB;AACnB,WAAOA,WAAW,GAAGd,UAAU,CAACY,KAAD,EAAQD,MAAR,CAAb,GAA+BC,KAAjD;AACD;;AACD,MAAIG,MAAM,GAAGf,UAAU,CAACY,KAAD,EAAQL,UAAU,CAACI,MAAM,GAAGN,UAAU,CAACO,KAAD,CAApB,CAAlB,CAAvB;AACA,SAAOR,UAAU,CAACQ,KAAD,CAAV,GACHT,SAAS,CAACG,aAAa,CAACS,MAAD,CAAd,EAAwB,CAAxB,EAA2BJ,MAA3B,CAAT,CAA4CK,IAA5C,CAAiD,EAAjD,CADG,GAEHD,MAAM,CAACE,KAAP,CAAa,CAAb,EAAgBN,MAAhB,CAFJ;AAGD;;AAEDO,MAAM,CAACC,OAAP,GAAiBT,aAAjB;;;;;;;;;;0BAxBIH,U;0BAWKG,a","sourcesContent":["var baseRepeat = require('./_baseRepeat'),\n    baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringSize = require('./_stringSize'),\n    stringToArray = require('./_stringToArray');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil;\n\n/**\n * Creates the padding for `string` based on `length`. The `chars` string\n * is truncated if the number of characters exceeds `length`.\n *\n * @private\n * @param {number} length The padding length.\n * @param {string} [chars=' '] The string used as padding.\n * @returns {string} Returns the padding for `string`.\n */\nfunction createPadding(length, chars) {\n  chars = chars === undefined ? ' ' : baseToString(chars);\n\n  var charsLength = chars.length;\n  if (charsLength < 2) {\n    return charsLength ? baseRepeat(chars, length) : chars;\n  }\n  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n  return hasUnicode(chars)\n    ? castSlice(stringToArray(result), 0, length).join('')\n    : result.slice(0, length);\n}\n\nmodule.exports = createPadding;\n"]},"metadata":{},"sourceType":"script"}