{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Financial/Accounts/Accounts.tsx\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { filterData, scapeRegex } from 'Utils/functions';\nimport { message } from 'antd';\nimport AccountDrawer from 'Components/Drawers/FinanceAccount/FinanceAccountDrawer';\nimport EmptyComponent from 'Components/EmptyComponent/EmptyComponent';\nimport useDestroyAccount from './useDestroyAccount';\nimport HeaderActions from 'Components/MainList/HeaderActions';\nimport ContainerList from 'Components/MainList/ContainerList';\nimport useGetAccounts from './useGetAccounts';\nimport AccountTable from './AccountTable';\nimport messageError from 'Utils/messageError';\nimport useColumns from './useColumns';\nimport useExportData from './useExportData';\nconst initial_filters = {\n  search: '',\n  pagination: {\n    current_page: 1,\n    page_size: 20\n  },\n  sort: {\n    field: 'description',\n    order: 'ascend'\n  }\n};\nconst columns_keys = ['description'];\n\nconst Accounts = () => {\n  const [filters, setFilters] = useState(initial_filters);\n  const [data, setData] = useState([]);\n  const AccountDrawerRef = useRef(null);\n  const [{\n    loading\n  }, getAccounts] = useGetAccounts();\n  const [destroyAccount, {\n    loading: destroy_loading\n  }] = useDestroyAccount();\n\n  const loadAccounts = async () => {\n    try {\n      const response = await getAccounts();\n      setData(response.data);\n    } catch (error) {\n      messageError('202130051643');\n    }\n  };\n\n  useEffect(() => {\n    loadAccounts(); // eslint-disable-next-line\n  }, []);\n  const onPressEnter = useCallback(value => {\n    setFilters(old_filters => ({ ...old_filters,\n      search: scapeRegex(value)\n    }));\n  }, []);\n  const handleTableChange = useCallback((pagination, _filter, sorter) => {\n    var _sorter$column;\n\n    let internal_filters = filters;\n\n    if (sorter === null || sorter === void 0 ? void 0 : (_sorter$column = sorter.column) === null || _sorter$column === void 0 ? void 0 : _sorter$column.sorter) {\n      internal_filters = { ...internal_filters,\n        sort: {\n          order: sorter.order,\n          field: sorter.field\n        }\n      };\n    }\n\n    internal_filters = { ...internal_filters,\n      pagination: {\n        current_page: pagination.current || internal_filters.pagination.current_page,\n        page_size: pagination.pageSize || internal_filters.pagination.page_size\n      }\n    };\n    setFilters(internal_filters);\n  }, [filters]);\n\n  const handleOpenDrawer = id => {\n    var _AccountDrawerRef$cur;\n\n    (_AccountDrawerRef$cur = AccountDrawerRef.current) === null || _AccountDrawerRef$cur === void 0 ? void 0 : _AccountDrawerRef$cur.open(id);\n  };\n\n  const locale = useMemo(() => ({\n    emptyText: /*#__PURE__*/React.createElement(EmptyComponent, {\n      onClick: () => handleOpenDrawer(),\n      action_text: \"Conta Financeira\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    })\n  }), []);\n\n  const handleDelete = async id => {\n    try {\n      const response = await destroyAccount(id);\n\n      if (response.data.success) {\n        message.success('Conta financeira excluÃ­da com sucesso!');\n        setData(prev => prev.filter(person => person._id !== id));\n      }\n    } catch (error) {\n      messageError('202105161946');\n    }\n  };\n\n  const afterSave = account => {\n    setData(prev => {\n      const prev_account = data.find(p => p._id === account._id);\n\n      if (prev_account) {\n        const old_account = prev.filter(p => p._id !== account._id);\n        return [...old_account, account];\n      }\n\n      return [...prev, account];\n    });\n  };\n\n  const columns = useColumns({\n    handleDelete,\n    handleEdit: handleOpenDrawer\n  });\n  const filtered_data = useMemo(() => filterData({\n    data,\n    filters,\n    columns_keys\n  }), [filters, data]);\n  const exportToXLS = useExportData(filtered_data);\n  return /*#__PURE__*/React.createElement(ContainerList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(HeaderActions, {\n    onPressEnter: onPressEnter,\n    setFilters: setFilters,\n    placeholder: \"Informe o nome da conta\",\n    button_text: \"Nova Conta\",\n    handleNew: handleOpenDrawer,\n    has_create_permission: true,\n    exportToXLS: exportToXLS,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AccountTable, {\n    columns: columns,\n    filtered_data: filtered_data,\n    filters: filters,\n    handleTableChange: handleTableChange,\n    loading: loading || destroy_loading,\n    locale: locale,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AccountDrawer, {\n    afterSave: afterSave,\n    ref: AccountDrawerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }));\n};\n\n__signature__(Accounts, \"useState{[filters, setFilters](initial_filters)}\\nuseState{[data, setData]([])}\\nuseRef{AccountDrawerRef}\\nuseGetAccounts{[{ loading }, getAccounts]}\\nuseDestroyAccount{[destroyAccount, { loading: destroy_loading }]}\\nuseEffect{}\\nuseCallback{onPressEnter}\\nuseCallback{handleTableChange}\\nuseMemo{locale}\\nuseColumns{columns}\\nuseMemo{filtered_data}\\nuseExportData{exportToXLS}\", () => [useGetAccounts, useDestroyAccount, useColumns, useExportData]);\n\nAccounts.displayName = \"Accounts\";\nconst _default = Accounts;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(initial_filters, \"initial_filters\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Financial/Accounts/Accounts.tsx\");\n  reactHotLoader.register(columns_keys, \"columns_keys\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Financial/Accounts/Accounts.tsx\");\n  reactHotLoader.register(Accounts, \"Accounts\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Financial/Accounts/Accounts.tsx\");\n  reactHotLoader.register(_default, \"default\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Financial/Accounts/Accounts.tsx\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Financial/Accounts/Accounts.tsx"],"names":["React","useCallback","useEffect","useMemo","useRef","useState","filterData","scapeRegex","message","AccountDrawer","EmptyComponent","useDestroyAccount","HeaderActions","ContainerList","useGetAccounts","AccountTable","messageError","useColumns","useExportData","initial_filters","search","pagination","current_page","page_size","sort","field","order","columns_keys","Accounts","filters","setFilters","data","setData","AccountDrawerRef","loading","getAccounts","destroyAccount","destroy_loading","loadAccounts","response","error","onPressEnter","value","old_filters","handleTableChange","_filter","sorter","internal_filters","column","current","pageSize","handleOpenDrawer","id","open","locale","emptyText","handleDelete","success","prev","filter","person","_id","afterSave","account","prev_account","find","p","old_account","columns","handleEdit","filtered_data","exportToXLS"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { filterData, FiltersType, scapeRegex } from 'Utils/functions'\nimport { TablePaginationConfig } from 'antd/es/table'\nimport { Key } from 'antd/lib/table/interface'\nimport { Account } from './types'\nimport { message } from 'antd'\nimport AccountDrawer, { FinanceAccountDrawerType } from 'Components/Drawers/FinanceAccount/FinanceAccountDrawer'\nimport EmptyComponent from 'Components/EmptyComponent/EmptyComponent'\nimport useDestroyAccount from './useDestroyAccount'\nimport HeaderActions from 'Components/MainList/HeaderActions'\nimport ContainerList from 'Components/MainList/ContainerList'\nimport useGetAccounts from './useGetAccounts'\nimport AccountTable from './AccountTable'\nimport messageError from 'Utils/messageError'\nimport useColumns from './useColumns'\nimport useExportData from './useExportData'\n\nconst initial_filters: FiltersType = {\n  search: '',\n  pagination: {\n    current_page: 1,\n    page_size: 20\n  },\n  sort: {\n    field: 'description',\n    order: 'ascend'\n  }\n}\n\nconst columns_keys = ['description']\n\nconst Accounts: React.FC = () => {\n  const [filters, setFilters] = useState<FiltersType>(initial_filters)\n  const [data, setData] = useState<Account[]>([])\n  const AccountDrawerRef = useRef<FinanceAccountDrawerType>(null)\n  const [{ loading }, getAccounts] = useGetAccounts()\n  const [destroyAccount, { loading: destroy_loading }] = useDestroyAccount()\n\n  const loadAccounts = async () => {\n    try {\n      const response = await getAccounts()\n      setData(response.data)\n    } catch (error) {\n      messageError('202130051643')\n    }\n  }\n\n  useEffect(() => {\n    loadAccounts()\n    // eslint-disable-next-line\n  }, [])\n\n  const onPressEnter = useCallback((value: string) => {\n    setFilters((old_filters) => ({ ...old_filters, search: scapeRegex(value) }))\n  }, [])\n\n  const handleTableChange = useCallback((\n    pagination: TablePaginationConfig,\n    _filter: Record<string, Key[] | null>,\n    sorter: any\n  ): void => {\n    let internal_filters: FiltersType = filters\n\n    if (sorter?.column?.sorter) {\n      internal_filters = { ...internal_filters, sort: { order: sorter.order, field: sorter.field } }\n    }\n\n    internal_filters = {\n      ...internal_filters,\n      pagination: {\n        current_page: pagination.current || internal_filters!.pagination!.current_page,\n        page_size: pagination.pageSize || internal_filters!.pagination!.page_size\n      }\n    }\n\n    setFilters(internal_filters)\n  }, [filters])\n\n  const handleOpenDrawer = (id?: string) => {\n    AccountDrawerRef.current?.open(id)\n  }\n\n  const locale = useMemo(() => ({\n    emptyText: (\n      <EmptyComponent\n        onClick={() => handleOpenDrawer()}\n        action_text=\"Conta Financeira\"\n      />\n    )\n  }), [])\n\n\n  const handleDelete = async (id: string) => {\n    try {\n      const response = await destroyAccount(id)\n      if (response.data.success) {\n        message.success('Conta financeira excluÃ­da com sucesso!')\n        setData((prev) => prev.filter(person => person._id !== id))\n      }\n    } catch (error) {\n      messageError('202105161946')\n    }\n  }\n\n  const afterSave = (account: Account) => {\n    setData(prev => {\n      const prev_account = data.find(p => p._id === account._id)\n\n      if (prev_account) {\n        const old_account = prev.filter(p => p._id !== account._id)\n\n        return [...old_account, account]\n      }\n\n      return [...prev, account]\n    })\n  }\n\n  const columns = useColumns({ handleDelete, handleEdit: handleOpenDrawer })\n  const filtered_data = useMemo(() => filterData({ data, filters, columns_keys }), [filters, data])\n\n  const exportToXLS = useExportData(filtered_data)\n\n  return (\n    <ContainerList>\n      <HeaderActions\n        onPressEnter={onPressEnter}\n        setFilters={setFilters}\n        placeholder=\"Informe o nome da conta\"\n        button_text=\"Nova Conta\"\n        handleNew={handleOpenDrawer}\n        has_create_permission={true}\n        exportToXLS={exportToXLS}\n      />\n\n      <AccountTable\n        columns={columns}\n        filtered_data={filtered_data}\n        filters={filters}\n        handleTableChange={handleTableChange}\n        loading={loading || destroy_loading}\n        locale={locale}\n      />\n\n      <AccountDrawer afterSave={afterSave} ref={AccountDrawerRef}/>\n    </ContainerList>\n  )\n}\n\nexport default Accounts\n"]},"metadata":{},"sourceType":"module"}