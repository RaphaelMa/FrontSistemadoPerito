{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Schedule/Schedule.tsx\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Badge, Calendar, message, Spin } from 'antd';\nimport ScheduleModal from 'Components/Modals/Schedule/ScheduleModal';\nimport useGetScheduleData from 'Pages/Schedule/useGetScheduleData';\nimport moment, { defaultFormat } from 'moment';\nimport styled from 'styled-components';\nimport Header from './Header';\nimport { lighten } from 'polished';\nimport { normalizeString } from '../../Utils/functions';\nconst NORMALIZED_STATUS = {\n  'Aguardando': 'warning',\n  'Realizado': 'success',\n  'Cancelado': 'error'\n};\n\nconst Schedule = () => {\n  const [raw_data, setRawData] = useState([]);\n  const [month_data_filtered, setMonthDataFiltered] = useState([]);\n  const [filters, setFilters] = useState(null);\n  const [date, setDate] = useState(undefined);\n  const [loading, getScheduleDates] = useGetScheduleData();\n  const scheduleModalRef = useRef(null);\n  const fetchData = useCallback(async date => {\n    try {\n      const {\n        data\n      } = await getScheduleDates(date); // const fake_content: Content[] = []\n      //\n      // for (let i = 0; i < 10; i++) {\n      //   fake_content.push(\n      //     {\n      //       _id: String('5fce890b67015423f347885d' + i),\n      //       hour: '14:00',\n      //       status: i % 2 === 0 ? 'Aguardando' : i % 3 === 0 ? 'Cancelado' : 'Realizado',\n      //       color: i % 2 === 0 ? '#497208' : i % 3 === 0 ? '#FF6347' : '#5E12DC',\n      //       processNumber: '745896321547',\n      //       expertName: i % 2 === 0 ? 'Gustavo afwqfnpw' : 'Adriel',\n      //       expertiseDate: '2020-12-07T16:56:59.000Z',\n      //       place: 'Clínica com o ome maior pra testar',\n      //       deadLineDescription: i % 2 === 0 ? 'Perícia' : i % 3 === 0 ? 'Laudo' : 'Esc. Laudo'\n      //     }\n      //   )\n      // }\n      //\n      // let fake_data: Month[] | [] = data.month.map((month, index) => ({\n      //   ...month,\n      //   content: index % 3 === 0 ? fake_content : []\n      // }))\n      //\n\n      if (!data) return; // setRawData(fake_data)\n\n      setRawData(data.month);\n      setDate(date);\n    } catch (e) {\n      message.error('Não foi possível carregar os dias do mês. Recarregue a página e tente novamente. ' + 'Se persistir o erro entre em contato conosco pelo código: 2008202138');\n    }\n  }, [getScheduleDates]);\n\n  const loadData = () => {\n    const raw_date = window.localStorage.getItem('schedule_date');\n\n    if (!raw_date) {\n      fetchData(moment());\n      return;\n    }\n\n    try {\n      const date_moment = moment(JSON.parse(raw_date), defaultFormat);\n      fetchData(date_moment);\n    } catch (e) {\n      console.log(e);\n      fetchData(moment());\n    }\n  };\n\n  useEffect(() => {\n    loadData(); // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    if (date) {\n      window.localStorage.setItem('schedule_date', JSON.stringify(date.format(defaultFormat)));\n    }\n  }, [date]);\n  useEffect(() => {\n    setMonthDataFiltered(raw_data);\n  }, [raw_data]);\n  const filterContent = useCallback(content => {\n    const filters_typed = filters;\n    return content.filter(content => Object.keys(filters_typed).reduce((acc, key) => {\n      if (key === 'deadLineDescription') {\n        return acc && content[key] === filters_typed[key];\n      }\n\n      const content_normalized = normalizeString(content[key] || '');\n      const filter_content_normalized = normalizeString(filters_typed[key]);\n      return acc && content_normalized.includes(filter_content_normalized);\n    }, true));\n  }, [filters]);\n  const handleFilters = useCallback(() => {\n    const data_filtered = raw_data.map(day => ({ ...day,\n      content: filterContent(day.content)\n    }));\n    setMonthDataFiltered(data_filtered);\n  }, [filterContent, raw_data]);\n  useEffect(() => {\n    if (filters) {\n      handleFilters();\n    }\n  }, [filters, handleFilters]);\n  const handleProcess = useCallback(id => {\n    var _scheduleModalRef$cur;\n\n    (_scheduleModalRef$cur = scheduleModalRef.current) === null || _scheduleModalRef$cur === void 0 ? void 0 : _scheduleModalRef$cur.open(id);\n  }, []);\n  const dateCellRender = useCallback(date => {\n    var _month_data_filtered$;\n\n    if (!month_data_filtered.length) return [];\n    const format_date = moment(date, defaultFormat).format('YYYY-MM-DD');\n    const content = (_month_data_filtered$ = month_data_filtered.find(month => moment(month === null || month === void 0 ? void 0 : month.date, defaultFormat).format('YYYY-MM-DD') === format_date)) === null || _month_data_filtered$ === void 0 ? void 0 : _month_data_filtered$.content;\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"events\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }, (content || []).map((process, index) => {\n      const process_text = `${process.deadLineDescription} - ${process.hour} ${process.processNumber} ${process.expertName || ''}`;\n      return /*#__PURE__*/React.createElement(LiStyled, {\n        key: index,\n        $color: process.color,\n        title: process_text,\n        onClick: () => handleProcess(process._id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Process, {\n        style: {\n          paddingLeft: 3\n        },\n        $color: process.color,\n        status: NORMALIZED_STATUS[process.status],\n        text: process_text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 15\n        }\n      }));\n    }));\n  }, [month_data_filtered, handleProcess]);\n  const onPanelChange = useCallback(date => {\n    fetchData(date);\n    setDate(date);\n  }, [fetchData]);\n  const headerRender = useCallback(({\n    value,\n    onChange\n  }) => /*#__PURE__*/React.createElement(Header, {\n    value: value,\n    onChange: onChange,\n    setFilters: setFilters,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }\n  }), [setFilters]);\n  const afterSave = useCallback(() => {\n    fetchData(moment());\n  }, [fetchData]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Spin, {\n    spinning: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CalendarStyled, {\n    fullscreen: true,\n    dateCellRender: dateCellRender,\n    onPanelChange: onPanelChange,\n    value: date,\n    headerRender: headerRender,\n    mode: \"month\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(ScheduleModal, {\n    afterSave: afterSave,\n    ref: scheduleModalRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }\n  }));\n};\n\n__signature__(Schedule, \"useState{[raw_data, setRawData]([])}\\nuseState{[month_data_filtered, setMonthDataFiltered]([])}\\nuseState{[filters, setFilters](null)}\\nuseState{[date, setDate](undefined)}\\nuseGetScheduleData{[loading, getScheduleDates]}\\nuseRef{scheduleModalRef}\\nuseCallback{fetchData}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseCallback{filterContent}\\nuseCallback{handleFilters}\\nuseEffect{}\\nuseCallback{handleProcess}\\nuseCallback{dateCellRender}\\nuseCallback{onPanelChange}\\nuseCallback{headerRender}\\nuseCallback{afterSave}\", () => [useGetScheduleData]);\n\nSchedule.displayName = \"Schedule\";\nconst _default = Schedule;\nexport default _default;\nconst Container = styled.div.withConfig({\n  displayName: \"Schedule__Container\",\n  componentId: \"sc-50c8ez-0\"\n})([\"padding:1rem;overflow-x:auto;height:calc(100vh - 5rem);user-select:none;\"]);\nconst LiStyled = styled.li.withConfig({\n  displayName: \"Schedule__LiStyled\",\n  componentId: \"sc-50c8ez-1\"\n})([\"line-height:16px !important;color:\", \" !important;\"], p => p.$color); // @ts-ignore\n\nconst Process = styled(Badge).withConfig({\n  displayName: \"Schedule__Process\",\n  componentId: \"sc-50c8ez-2\"\n})([\"width:100%;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;font-size:1rem;cursor:pointer;background-color:\", \";border-radius:3px;border:1px solid \", \";.ant-badge-status-text{color:\", \";margin-left:3px;}\"], p => lighten(0.7, p.$color), p => p.$color, p => p.$color);\nconst CalendarStyled = styled(Calendar).withConfig({\n  displayName: \"Schedule__CalendarStyled\",\n  componentId: \"sc-50c8ez-3\"\n})([\".ant-picker-cell,.ant-picker-cell-in-view{cursor:auto;}.ant-picker-calendar-date-content{height:unset !important;min-height:80px;}tr,td{vertical-align:top;}.ant-picker-calendar-date-value{display:flex;}\"]);\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(NORMALIZED_STATUS, \"NORMALIZED_STATUS\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Schedule/Schedule.tsx\");\n  reactHotLoader.register(Schedule, \"Schedule\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Schedule/Schedule.tsx\");\n  reactHotLoader.register(Container, \"Container\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Schedule/Schedule.tsx\");\n  reactHotLoader.register(LiStyled, \"LiStyled\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Schedule/Schedule.tsx\");\n  reactHotLoader.register(Process, \"Process\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Schedule/Schedule.tsx\");\n  reactHotLoader.register(CalendarStyled, \"CalendarStyled\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Schedule/Schedule.tsx\");\n  reactHotLoader.register(_default, \"default\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Schedule/Schedule.tsx\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/Schedule/Schedule.tsx"],"names":["React","useCallback","useEffect","useRef","useState","Badge","Calendar","message","Spin","ScheduleModal","useGetScheduleData","moment","defaultFormat","styled","Header","lighten","normalizeString","NORMALIZED_STATUS","Schedule","raw_data","setRawData","month_data_filtered","setMonthDataFiltered","filters","setFilters","date","setDate","undefined","loading","getScheduleDates","scheduleModalRef","fetchData","data","month","e","error","loadData","raw_date","window","localStorage","getItem","date_moment","JSON","parse","console","log","setItem","stringify","format","filterContent","content","filters_typed","filter","Object","keys","reduce","acc","key","content_normalized","filter_content_normalized","includes","handleFilters","data_filtered","map","day","handleProcess","id","current","open","dateCellRender","length","format_date","find","process","index","process_text","deadLineDescription","hour","processNumber","expertName","color","_id","paddingLeft","status","onPanelChange","headerRender","value","onChange","afterSave","Container","div","LiStyled","li","p","$color","Process","CalendarStyled"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Badge, Calendar, message, Spin } from 'antd'\nimport { Month, Status, Content } from './types'\nimport ScheduleModal, { ScheduleModalType } from 'Components/Modals/Schedule/ScheduleModal'\nimport useGetScheduleData from 'Pages/Schedule/useGetScheduleData'\nimport moment, { defaultFormat, Moment } from 'moment'\nimport styled from 'styled-components'\nimport Header from './Header'\nimport { lighten } from 'polished'\nimport { normalizeString } from '../../Utils/functions'\n\nconst NORMALIZED_STATUS: Status = {\n  'Aguardando': 'warning',\n  'Realizado': 'success',\n  'Cancelado': 'error'\n}\n\nexport type FiltersType = {\n  processNumber: string,\n  expertName: string,\n  deadLineDescription: string\n}\n\nconst Schedule: React.FC = () => {\n  const [raw_data, setRawData] = useState<Month[]>([])\n  const [month_data_filtered, setMonthDataFiltered] = useState<Month[]>([])\n  const [filters, setFilters] = useState<FiltersType | null>(null)\n  const [date, setDate] = useState<Moment | undefined>(undefined)\n\n  const [loading, getScheduleDates] = useGetScheduleData()\n\n  const scheduleModalRef = useRef<ScheduleModalType>(null)\n\n  const fetchData = useCallback(async (date: Moment) => {\n    try {\n      const { data } = await getScheduleDates(date)\n\n      // const fake_content: Content[] = []\n      //\n      // for (let i = 0; i < 10; i++) {\n      //   fake_content.push(\n      //     {\n      //       _id: String('5fce890b67015423f347885d' + i),\n      //       hour: '14:00',\n      //       status: i % 2 === 0 ? 'Aguardando' : i % 3 === 0 ? 'Cancelado' : 'Realizado',\n      //       color: i % 2 === 0 ? '#497208' : i % 3 === 0 ? '#FF6347' : '#5E12DC',\n      //       processNumber: '745896321547',\n      //       expertName: i % 2 === 0 ? 'Gustavo afwqfnpw' : 'Adriel',\n      //       expertiseDate: '2020-12-07T16:56:59.000Z',\n      //       place: 'Clínica com o ome maior pra testar',\n      //       deadLineDescription: i % 2 === 0 ? 'Perícia' : i % 3 === 0 ? 'Laudo' : 'Esc. Laudo'\n      //     }\n      //   )\n      // }\n      //\n      // let fake_data: Month[] | [] = data.month.map((month, index) => ({\n      //   ...month,\n      //   content: index % 3 === 0 ? fake_content : []\n      // }))\n      //\n      if (!data) return\n      // setRawData(fake_data)\n      setRawData(data.month)\n      setDate(date)\n    } catch (e) {\n      message.error('Não foi possível carregar os dias do mês. Recarregue a página e tente novamente. ' +\n        'Se persistir o erro entre em contato conosco pelo código: 2008202138')\n    }\n  }, [getScheduleDates])\n\n  const loadData = () => {\n    const raw_date = window.localStorage.getItem('schedule_date')\n\n    if (!raw_date) {\n      fetchData(moment())\n      return\n    }\n\n    try {\n      const date_moment = moment(JSON.parse(raw_date), defaultFormat)\n      fetchData(date_moment)\n    } catch (e) {\n      console.log(e)\n      fetchData(moment())\n    }\n  }\n\n  useEffect(() => {\n    loadData()\n    // eslint-disable-next-line\n  }, [])\n\n  useEffect(() => {\n    if (date) {\n      window.localStorage.setItem('schedule_date', JSON.stringify(date.format(defaultFormat)))\n    }\n  }, [date])\n\n  useEffect(() => {\n    setMonthDataFiltered(raw_data)\n  }, [raw_data])\n\n  const filterContent = useCallback((content: Content[]) => {\n    const filters_typed = filters as FiltersType\n\n    return (\n      content.filter(content => (\n        Object.keys(filters_typed).reduce((acc: Boolean, key) => {\n          if (key === 'deadLineDescription') {\n            return (acc && content[key] === filters_typed[key])\n          }\n\n          const content_normalized = normalizeString(content[key as keyof FiltersType] || '')\n          const filter_content_normalized = normalizeString(filters_typed[key as keyof FiltersType])\n\n          return (acc && content_normalized.includes(filter_content_normalized))\n        }, true)\n      ))\n    )\n  }, [filters])\n\n  const handleFilters = useCallback(() => {\n    const data_filtered = raw_data.map(day => ({\n      ...day,\n      content: filterContent(day.content)\n    }))\n\n    setMonthDataFiltered(data_filtered)\n  }, [filterContent, raw_data])\n\n  useEffect(() => {\n    if (filters) {\n      handleFilters()\n    }\n  }, [filters, handleFilters])\n\n  const handleProcess = useCallback((id: string) => {\n    scheduleModalRef.current?.open(id)\n  }, [])\n\n  const dateCellRender = useCallback((date: Moment) => {\n    if (!month_data_filtered.length) return []\n\n    const format_date = moment(date, defaultFormat).format('YYYY-MM-DD')\n\n    const content = month_data_filtered.find(month => (\n      moment(month?.date, defaultFormat).format('YYYY-MM-DD') === format_date)\n    )?.content\n\n    return (\n      <ul className=\"events\">\n        {(content || []).map((process, index) => {\n          const process_text = `${process.deadLineDescription} - ${process.hour} ${process.processNumber} ${process.expertName || ''}`\n\n          return (\n            <LiStyled\n              key={index}\n              $color={process.color}\n              title={process_text}\n              onClick={() => handleProcess(process._id)}\n            >\n              <Process\n                style={{ paddingLeft: 3 }}\n                $color={process.color}\n                status={NORMALIZED_STATUS[process.status]}\n                text={process_text}\n              />\n            </LiStyled>\n          )\n        })}\n      </ul>\n    )\n  }, [month_data_filtered, handleProcess])\n\n  const onPanelChange = useCallback((date: Moment) => {\n    fetchData(date)\n    setDate(date)\n  }, [fetchData])\n\n  const headerRender = useCallback(({ value, onChange }: { value: Moment, onChange: (date: Moment) => void }) => (\n    <Header\n      value={value}\n      onChange={onChange}\n      setFilters={setFilters}\n    />\n  ), [setFilters])\n\n  const afterSave = useCallback(() => {\n    fetchData(moment())\n  }, [fetchData])\n\n  return (\n    <Container>\n      <Spin spinning={loading}>\n        <CalendarStyled\n          fullscreen={true}\n          dateCellRender={dateCellRender}\n          onPanelChange={onPanelChange}\n          value={date}\n          headerRender={headerRender}\n          mode=\"month\"\n        />\n      </Spin>\n\n      <ScheduleModal afterSave={afterSave} ref={scheduleModalRef}/>\n    </Container>\n  )\n}\n\nexport default Schedule\n\nconst Container = styled.div`\n  padding: 1rem;\n  overflow-x: auto;\n  height: calc(100vh - 5rem);\n  user-select: none;\n`\n\ntype ProcessType = {\n  $color: string,\n}\n\nconst LiStyled = styled.li<ProcessType>`\n  line-height: 16px !important;\n  color: ${(p: ProcessType) => p.$color} !important;\n`\n\n// @ts-ignore\nconst Process = styled<ProcessType>(Badge)`\n  width: 100%;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  font-size: 1rem;\n  cursor: pointer;\n  background-color: ${(p: ProcessType) => lighten(0.7, p.$color)};\n  border-radius: 3px;\n  border: 1px solid ${(p: ProcessType) => p.$color};\n\n  .ant-badge-status-text {\n    color: ${(p: ProcessType) => p.$color};\n    margin-left: 3px;\n  }\n`\n\nconst CalendarStyled = styled(Calendar)`\n  .ant-picker-cell, .ant-picker-cell-in-view {\n    cursor: auto;\n  }\n\n  .ant-picker-calendar-date-content {\n    height: unset !important;\n    min-height: 80px;\n  }\n\n  tr, td {\n    vertical-align: top;\n  }\n\n  .ant-picker-calendar-date-value {\n    display: flex;\n  }\n`\n"]},"metadata":{},"sourceType":"module"}