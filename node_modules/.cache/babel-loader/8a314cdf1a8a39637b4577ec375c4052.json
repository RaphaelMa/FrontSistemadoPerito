{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport warning from \"rc-util/es/warning\";\nimport { toArray } from './valueUtil';\n\nfunction warningProps(props) {\n  var searchPlaceholder = props.searchPlaceholder,\n      treeCheckStrictly = props.treeCheckStrictly,\n      treeCheckable = props.treeCheckable,\n      labelInValue = props.labelInValue,\n      value = props.value,\n      multiple = props.multiple;\n  warning(!searchPlaceholder, '`searchPlaceholder` has been removed.');\n\n  if (treeCheckStrictly && labelInValue === false) {\n    warning(false, '`treeCheckStrictly` will force set `labelInValue` to `true`.');\n  }\n\n  if (labelInValue || treeCheckStrictly) {\n    warning(toArray(value).every(function (val) {\n      return val && _typeof(val) === 'object' && 'value' in val;\n    }), 'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');\n  }\n\n  if (treeCheckStrictly || multiple || treeCheckable) {\n    warning(!value || Array.isArray(value), '`value` should be an array when `TreeSelect` is checkable or multiple.');\n  } else {\n    warning(!Array.isArray(value), '`value` should not be array when `TreeSelect` is single mode.');\n  }\n}\n\nconst _default = warningProps;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(warningProps, \"warningProps\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/rc-tree-select/es/utils/warningPropsUtil.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/rc-tree-select/es/utils/warningPropsUtil.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/rc-tree-select/es/utils/warningPropsUtil.js"],"names":["_typeof","warning","toArray","warningProps","props","searchPlaceholder","treeCheckStrictly","treeCheckable","labelInValue","value","multiple","every","val","Array","isArray"],"mappings":";;;;;;;;;AAAA,OAAOA,OAAP,MAAoB,mCAApB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,MAAIC,iBAAiB,GAAGD,KAAK,CAACC,iBAA9B;AAAA,MACIC,iBAAiB,GAAGF,KAAK,CAACE,iBAD9B;AAAA,MAEIC,aAAa,GAAGH,KAAK,CAACG,aAF1B;AAAA,MAGIC,YAAY,GAAGJ,KAAK,CAACI,YAHzB;AAAA,MAIIC,KAAK,GAAGL,KAAK,CAACK,KAJlB;AAAA,MAKIC,QAAQ,GAAGN,KAAK,CAACM,QALrB;AAMAT,EAAAA,OAAO,CAAC,CAACI,iBAAF,EAAqB,uCAArB,CAAP;;AAEA,MAAIC,iBAAiB,IAAIE,YAAY,KAAK,KAA1C,EAAiD;AAC/CP,IAAAA,OAAO,CAAC,KAAD,EAAQ,8DAAR,CAAP;AACD;;AAED,MAAIO,YAAY,IAAIF,iBAApB,EAAuC;AACrCL,IAAAA,OAAO,CAACC,OAAO,CAACO,KAAD,CAAP,CAAeE,KAAf,CAAqB,UAAUC,GAAV,EAAe;AAC1C,aAAOA,GAAG,IAAIZ,OAAO,CAACY,GAAD,CAAP,KAAiB,QAAxB,IAAoC,WAAWA,GAAtD;AACD,KAFO,CAAD,EAEH,iKAFG,CAAP;AAGD;;AAED,MAAIN,iBAAiB,IAAII,QAArB,IAAiCH,aAArC,EAAoD;AAClDN,IAAAA,OAAO,CAAC,CAACQ,KAAD,IAAUI,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAX,EAAiC,wEAAjC,CAAP;AACD,GAFD,MAEO;AACLR,IAAAA,OAAO,CAAC,CAACY,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAF,EAAwB,+DAAxB,CAAP;AACD;AACF;;iBAEcN,Y;AAAf;;;;;;;;;;0BA1BSA,Y","sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport warning from \"rc-util/es/warning\";\nimport { toArray } from './valueUtil';\n\nfunction warningProps(props) {\n  var searchPlaceholder = props.searchPlaceholder,\n      treeCheckStrictly = props.treeCheckStrictly,\n      treeCheckable = props.treeCheckable,\n      labelInValue = props.labelInValue,\n      value = props.value,\n      multiple = props.multiple;\n  warning(!searchPlaceholder, '`searchPlaceholder` has been removed.');\n\n  if (treeCheckStrictly && labelInValue === false) {\n    warning(false, '`treeCheckStrictly` will force set `labelInValue` to `true`.');\n  }\n\n  if (labelInValue || treeCheckStrictly) {\n    warning(toArray(value).every(function (val) {\n      return val && _typeof(val) === 'object' && 'value' in val;\n    }), 'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');\n  }\n\n  if (treeCheckStrictly || multiple || treeCheckable) {\n    warning(!value || Array.isArray(value), '`value` should be an array when `TreeSelect` is checkable or multiple.');\n  } else {\n    warning(!Array.isArray(value), '`value` should not be array when `TreeSelect` is single mode.');\n  }\n}\n\nexport default warningProps;"]},"metadata":{},"sourceType":"module"}