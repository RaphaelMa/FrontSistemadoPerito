{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/StatusImpeachments/StatusImpeachments.tsx\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport StatusImpeachmntTable from './StatusImpeachmntTable';\nimport { filterData, scapeRegex } from 'Utils/functions';\nimport HeaderActions from 'Components/MainList/HeaderActions';\nimport EmptyComponent from 'Components/EmptyComponent/EmptyComponent';\nimport ContainerList from 'Components/MainList/ContainerList';\nimport useColumns from './useColumns';\nimport StatusDrawer from 'Components/Drawers/StatusImpugnation/StatusImpugnationDrawer';\nimport useGetStatusImpeachments from './useGetStatusImpeachments';\nimport messageError from 'Utils/messageError';\nimport useDestroyStatusImpeachment from './useDestroyStatusImpeachment';\nimport { message } from 'antd';\nimport useExportData from './useExportData';\nconst initial_filters = {\n  search: '',\n  pagination: {\n    current_page: 1,\n    page_size: 20\n  },\n  sort: {\n    field: 'description',\n    order: 'ascend'\n  }\n};\nconst columns_keys = ['description'];\n\nconst StatusImpeachments = () => {\n  const [filters, setFilters] = useState(initial_filters);\n  const [data, setData] = useState([]);\n  const StatusDrawerRef = useRef(null);\n  const [{\n    loading\n  }, getStatuses] = useGetStatusImpeachments();\n  const [destroyStatus, {\n    loading: destroy_loading\n  }] = useDestroyStatusImpeachment();\n\n  const loadStatuses = async () => {\n    try {\n      const response = await getStatuses();\n      setData(response.data);\n    } catch (error) {\n      messageError('202105161935');\n    }\n  };\n\n  useEffect(() => {\n    loadStatuses(); // eslint-disable-next-line\n  }, []);\n  const onPressEnter = useCallback(value => {\n    setFilters(old_filters => ({ ...old_filters,\n      search: scapeRegex(value)\n    }));\n  }, []);\n  const handleTableChange = useCallback((pagination, _filter, sorter) => {\n    var _sorter$column;\n\n    let internal_filters = filters;\n\n    if (sorter === null || sorter === void 0 ? void 0 : (_sorter$column = sorter.column) === null || _sorter$column === void 0 ? void 0 : _sorter$column.sorter) {\n      internal_filters = { ...internal_filters,\n        sort: {\n          order: sorter.order,\n          field: sorter.field\n        }\n      };\n    }\n\n    internal_filters = { ...internal_filters,\n      pagination: {\n        current_page: pagination.current || internal_filters.pagination.current_page,\n        page_size: pagination.pageSize || internal_filters.pagination.page_size\n      }\n    };\n    setFilters(internal_filters);\n  }, [filters]);\n\n  const handleOpenDrawer = id => {\n    var _StatusDrawerRef$curr;\n\n    (_StatusDrawerRef$curr = StatusDrawerRef.current) === null || _StatusDrawerRef$curr === void 0 ? void 0 : _StatusDrawerRef$curr.open(id);\n  };\n\n  const locale = useMemo(() => ({\n    emptyText: /*#__PURE__*/React.createElement(EmptyComponent, {\n      onClick: () => handleOpenDrawer(),\n      action_text: \"Status de impugna\\xE7\\xE3o\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    })\n  }), []);\n\n  const handleDelete = async id => {\n    try {\n      const response = await destroyStatus(id);\n\n      if (response.data.success) {\n        message.success('Status de impugnação excluído com sucesso');\n        setData(prev => prev.filter(person => person._id !== id));\n      }\n    } catch (error) {\n      messageError('202105161946');\n    }\n  };\n\n  const afterSave = status => {\n    setData(prev => {\n      const prev_status = data.find(p => p._id === status._id);\n\n      if (prev_status) {\n        const old_status = prev.filter(p => p._id !== status._id);\n        return [...old_status, status];\n      }\n\n      return [...prev, status];\n    });\n  };\n\n  const columns = useColumns({\n    handleDelete,\n    handleEdit: handleOpenDrawer\n  });\n  const filtered_data = useMemo(() => filterData({\n    data,\n    filters,\n    columns_keys\n  }), [filters, data]);\n  const exportToXLS = useExportData(filtered_data);\n  return /*#__PURE__*/React.createElement(ContainerList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(HeaderActions, {\n    onPressEnter: onPressEnter,\n    setFilters: setFilters,\n    placeholder: \"Informe status impugna\\xE7\\xE3o\",\n    button_text: \"Novo Status\",\n    handleNew: handleOpenDrawer,\n    has_create_permission: true,\n    exportToXLS: exportToXLS,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(StatusImpeachmntTable, {\n    columns: columns,\n    filtered_data: filtered_data,\n    filters: filters,\n    handleTableChange: handleTableChange,\n    loading: loading || destroy_loading,\n    locale: locale,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(StatusDrawer, {\n    afterSave: afterSave,\n    ref: StatusDrawerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }));\n};\n\n__signature__(StatusImpeachments, \"useState{[filters, setFilters](initial_filters)}\\nuseState{[data, setData]([])}\\nuseRef{StatusDrawerRef}\\nuseGetStatusImpeachments{[{ loading }, getStatuses]}\\nuseDestroyStatusImpeachment{[destroyStatus, { loading: destroy_loading }]}\\nuseEffect{}\\nuseCallback{onPressEnter}\\nuseCallback{handleTableChange}\\nuseMemo{locale}\\nuseColumns{columns}\\nuseMemo{filtered_data}\\nuseExportData{exportToXLS}\", () => [useGetStatusImpeachments, useDestroyStatusImpeachment, useColumns, useExportData]);\n\nStatusImpeachments.displayName = \"StatusImpeachments\";\nconst _default = StatusImpeachments;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(initial_filters, \"initial_filters\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/StatusImpeachments/StatusImpeachments.tsx\");\n  reactHotLoader.register(columns_keys, \"columns_keys\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/StatusImpeachments/StatusImpeachments.tsx\");\n  reactHotLoader.register(StatusImpeachments, \"StatusImpeachments\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/StatusImpeachments/StatusImpeachments.tsx\");\n  reactHotLoader.register(_default, \"default\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/StatusImpeachments/StatusImpeachments.tsx\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/StatusImpeachments/StatusImpeachments.tsx"],"names":["React","useCallback","useEffect","useMemo","useRef","useState","StatusImpeachmntTable","filterData","scapeRegex","HeaderActions","EmptyComponent","ContainerList","useColumns","StatusDrawer","useGetStatusImpeachments","messageError","useDestroyStatusImpeachment","message","useExportData","initial_filters","search","pagination","current_page","page_size","sort","field","order","columns_keys","StatusImpeachments","filters","setFilters","data","setData","StatusDrawerRef","loading","getStatuses","destroyStatus","destroy_loading","loadStatuses","response","error","onPressEnter","value","old_filters","handleTableChange","_filter","sorter","internal_filters","column","current","pageSize","handleOpenDrawer","id","open","locale","emptyText","handleDelete","success","prev","filter","person","_id","afterSave","status","prev_status","find","p","old_status","columns","handleEdit","filtered_data","exportToXLS"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { TablePaginationConfig } from 'antd/es/table'\nimport { Key } from 'antd/lib/table/interface'\nimport { StatusImpeachment } from './types'\nimport StatusImpeachmntTable from './StatusImpeachmntTable'\nimport { filterData, FiltersType, scapeRegex } from 'Utils/functions'\nimport HeaderActions from 'Components/MainList/HeaderActions'\nimport EmptyComponent from 'Components/EmptyComponent/EmptyComponent'\nimport ContainerList from 'Components/MainList/ContainerList'\nimport useColumns from './useColumns'\nimport StatusDrawer, { StatusDrawerType } from 'Components/Drawers/StatusImpugnation/StatusImpugnationDrawer'\nimport useGetStatusImpeachments from './useGetStatusImpeachments'\nimport messageError from 'Utils/messageError'\nimport useDestroyStatusImpeachment from './useDestroyStatusImpeachment'\nimport { message } from 'antd'\nimport useExportData from './useExportData'\n\nconst initial_filters: FiltersType = {\n  search: '',\n  pagination: {\n    current_page: 1,\n    page_size: 20,\n  },\n  sort: {\n    field: 'description',\n    order: 'ascend',\n  },\n}\n\nconst columns_keys = ['description']\n\nconst StatusImpeachments: React.FC = () => {\n\n  const [filters, setFilters] = useState<FiltersType>(initial_filters)\n  const [data, setData] = useState<StatusImpeachment[]>([])\n  const StatusDrawerRef = useRef<StatusDrawerType>(null)\n  const [{ loading }, getStatuses] = useGetStatusImpeachments()\n  const [destroyStatus, { loading: destroy_loading }] = useDestroyStatusImpeachment()\n\n  const loadStatuses = async () => {\n    try {\n      const response = await getStatuses()\n      setData(response.data)\n    } catch (error) {\n      messageError('202105161935')\n    }\n  }\n\n  useEffect(() => {\n    loadStatuses()\n    // eslint-disable-next-line\n  }, [])\n\n  const onPressEnter = useCallback((value: string) => {\n    setFilters((old_filters) => ({ ...old_filters, search: scapeRegex(value) }))\n  }, [])\n\n  const handleTableChange = useCallback((\n    pagination: TablePaginationConfig,\n    _filter: Record<string, Key[] | null>,\n    sorter: any,\n  ): void => {\n    let internal_filters: FiltersType = filters\n\n    if (sorter?.column?.sorter) {\n      internal_filters = { ...internal_filters, sort: { order: sorter.order, field: sorter.field } }\n    }\n\n    internal_filters = {\n      ...internal_filters,\n      pagination: {\n        current_page: pagination.current || internal_filters!.pagination!.current_page,\n        page_size: pagination.pageSize || internal_filters!.pagination!.page_size,\n      },\n    }\n\n    setFilters(internal_filters)\n  }, [filters])\n\n  const handleOpenDrawer = (id?: string) => {\n    StatusDrawerRef.current?.open(id)\n  }\n\n  const locale = useMemo(() => ({\n    emptyText: (\n      <EmptyComponent\n        onClick={() => handleOpenDrawer()}\n        action_text=\"Status de impugnação\"\n      />\n    ),\n  }), [])\n\n\n  const handleDelete = async (id: string) => {\n    try {\n      const response = await destroyStatus(id)\n      if (response.data.success) {\n        message.success('Status de impugnação excluído com sucesso')\n        setData((prev) => prev.filter(person => person._id !== id))\n      }\n    } catch (error) {\n      messageError('202105161946')\n    }\n  }\n\n  const afterSave = (status: StatusImpeachment) => {\n    setData(prev => {\n      const prev_status = data.find(p => p._id === status._id)\n\n      if (prev_status) {\n        const old_status = prev.filter(p => p._id !== status._id)\n\n        return [...old_status, status]\n      }\n\n      return [...prev, status]\n    })\n  }\n\n  const columns = useColumns({ handleDelete, handleEdit: handleOpenDrawer })\n  const filtered_data = useMemo(() => filterData({ data, filters, columns_keys }), [filters, data])\n\n  const exportToXLS = useExportData(filtered_data)\n\n  return (\n    <ContainerList>\n      <HeaderActions\n        onPressEnter={onPressEnter}\n        setFilters={setFilters}\n        placeholder=\"Informe status impugnação\"\n        button_text=\"Novo Status\"\n        handleNew={handleOpenDrawer}\n        has_create_permission={true}\n        exportToXLS={exportToXLS}\n      />\n\n      <StatusImpeachmntTable\n        columns={columns}\n        filtered_data={filtered_data}\n        filters={filters}\n        handleTableChange={handleTableChange}\n        loading={loading || destroy_loading}\n        locale={locale}\n      />\n\n      <StatusDrawer afterSave={afterSave} ref={StatusDrawerRef}/>\n    </ContainerList>\n  )\n}\n\nexport default StatusImpeachments\n"]},"metadata":{},"sourceType":"module"}