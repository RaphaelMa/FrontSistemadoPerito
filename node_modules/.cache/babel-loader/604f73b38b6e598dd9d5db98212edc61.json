{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nvar toInteger = require('./_to-integer');\n\nvar max = Math.max;\nvar min = Math.min;\n\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(max, \"max\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/core-js/library/modules/_to-absolute-index.js\");\n  reactHotLoader.register(min, \"min\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/core-js/library/modules/_to-absolute-index.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/core-js/library/modules/_to-absolute-index.js"],"names":["toInteger","require","max","Math","min","module","exports","index","length"],"mappings":";;;;;;;;;AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAIC,GAAG,GAAGC,IAAI,CAACD,GAAf;AACA,IAAIE,GAAG,GAAGD,IAAI,CAACC,GAAf;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AACxCD,EAAAA,KAAK,GAAGP,SAAS,CAACO,KAAD,CAAjB;AACA,SAAOA,KAAK,GAAG,CAAR,GAAYL,GAAG,CAACK,KAAK,GAAGC,MAAT,EAAiB,CAAjB,CAAf,GAAqCJ,GAAG,CAACG,KAAD,EAAQC,MAAR,CAA/C;AACD,CAHD;;;;;;;;;;;0BAFIN,G;0BACAE,G","sourcesContent":["var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n"]},"metadata":{},"sourceType":"script"}