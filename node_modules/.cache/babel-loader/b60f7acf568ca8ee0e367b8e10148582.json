{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/ProcessIndicators/Situation.tsx\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Axis, Chart, Coord, Geom, Tooltip } from 'bizcharts';\nimport { currencyFormatter } from 'Utils/formatters';\nimport useGetProcessIndicators from './useGetProcessIndicators';\nimport { Empty, Spin } from 'antd';\nimport messageError from 'Utils/messageError';\n\nconst Situation = ({\n  type\n}) => {\n  const [{\n    data,\n    loading\n  }, getData] = useGetProcessIndicators();\n\n  const loadData = async () => {\n    try {\n      await getData(type);\n    } catch (error) {\n      messageError('202103071554');\n    }\n  };\n\n  useEffect(() => {\n    loadData(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [type]);\n  const situations = (data === null || data === void 0 ? void 0 : data.message) || [];\n  const cols = {};\n  return /*#__PURE__*/React.createElement(React.Fragment, null, type === 'situation' ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, \"Indicador Situa\\xE7\\xE3o do Processo\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, \"Este indicador informa o valor total dos honor\\xE1rios e o total de processos para cada situa\\xE7\\xE3o\")) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"Indicador Situa\\xE7\\xE3o Financeira do Processo\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"Este indicador informa o valor total dos honor\\xE1rios e o total de processos para cada situa\\xE7\\xE3o financeira\")), /*#__PURE__*/React.createElement(Spin, {\n    spinning: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GraphContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, situations.length === 0 ? /*#__PURE__*/React.createElement(Empty, {\n    description: \"Nenhum indicador encontrado\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(Chart, {\n    height: \"100%\",\n    data: situations,\n    scale: cols,\n    padding: \"auto\",\n    appendPadding: [0, 180, 0, 0],\n    autoFit: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Coord, {\n    transpose: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Axis, {\n    name: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Axis, {\n    name: \"totalHonorary\",\n    visible: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, (title, items) => /*#__PURE__*/React.createElement(CustomTooltip, {\n    title: title,\n    items: items,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 38\n    }\n  })), /*#__PURE__*/React.createElement(Geom, {\n    color: \"description\",\n    type: \"interval\",\n    position: \"description*totalHonorary\",\n    label: ['totalHonorary*totalProcess', (value, process) => {\n      return {\n        content: `${currencyFormatter(value, {\n          cents: true\n        })} | Processos: ${process}`\n      };\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  })))));\n};\n\n__signature__(Situation, \"useGetProcessIndicators{[{ data, loading }, getData]}\\nuseEffect{}\", () => [useGetProcessIndicators]);\n\nconst _default = Situation;\nexport default _default;\nconst GraphContainer = styled.div.withConfig({\n  displayName: \"Situation__GraphContainer\",\n  componentId: \"sc-1y7yaem-0\"\n})([\"height:calc(100vh - 5rem - 65.5px - 60px);margin-top:20px;border:1px solid \", \";padding:10px;\"], p => p.theme.colors.primary);\n\nconst CustomTooltip = ({\n  title,\n  items\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, title), items === null || items === void 0 ? void 0 : items.map((item, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TooltipItem, {\n    $color: item.color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, \"Processos: \", item.data.totalProcess), /*#__PURE__*/React.createElement(TooltipItem, {\n    $color: item.color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, \"Honor\\xE1rios: \", currencyFormatter(item.data.totalHonorary, {\n    cents: true\n  })))));\n};\n\nCustomTooltip.displayName = \"CustomTooltip\";\nconst TooltipItem = styled.div.withConfig({\n  displayName: \"Situation__TooltipItem\",\n  componentId: \"sc-1y7yaem-1\"\n})([\"margin-top:10px;&::before{content:'';display:inline-block;width:7px;height:7px;border-radius:50%;background-color:\", \";margin-right:5px;}\"], p => p.$color);\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Situation, \"Situation\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/ProcessIndicators/Situation.tsx\");\n  reactHotLoader.register(GraphContainer, \"GraphContainer\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/ProcessIndicators/Situation.tsx\");\n  reactHotLoader.register(CustomTooltip, \"CustomTooltip\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/ProcessIndicators/Situation.tsx\");\n  reactHotLoader.register(TooltipItem, \"TooltipItem\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/ProcessIndicators/Situation.tsx\");\n  reactHotLoader.register(_default, \"default\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/ProcessIndicators/Situation.tsx\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/ProcessIndicators/Situation.tsx"],"names":["React","useEffect","styled","Axis","Chart","Coord","Geom","Tooltip","currencyFormatter","useGetProcessIndicators","Empty","Spin","messageError","Situation","type","data","loading","getData","loadData","error","situations","message","cols","length","title","items","value","process","content","cents","GraphContainer","div","p","theme","colors","primary","CustomTooltip","padding","map","item","index","color","totalProcess","totalHonorary","TooltipItem","$color"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Axis, Chart, Coord, Geom, Tooltip } from 'bizcharts'\nimport { currencyFormatter } from 'Utils/formatters'\nimport useGetProcessIndicators from './useGetProcessIndicators'\nimport { Empty, Spin } from 'antd'\nimport messageError from 'Utils/messageError'\n\ntype SituationType = {\n  description: string,\n  totalHonorary: number,\n  totalProcess: number,\n}\n\ntype Props = {\n  type: 'situation' | 'financial-situation'\n}\n\nconst Situation: React.FC<Props> = ({ type }) => {\n\n  const [{ data, loading }, getData] = useGetProcessIndicators<SituationType>()\n\n  const loadData = async () => {\n    try {\n      await getData(type)\n    } catch (error) {\n      messageError('202103071554')\n    }\n  }\n\n  useEffect(() => {\n    loadData()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [type])\n\n  const situations = data?.message || []\n\n  const cols = {}\n\n  return (\n    <>\n      {type === 'situation'\n        ? (\n          <div>\n            <h2>Indicador Situação do Processo</h2>\n\n            <span>Este indicador informa o valor total dos honorários e o total de processos para cada situação</span>\n          </div>\n        ) : (\n          <div>\n            <h2>Indicador Situação Financeira do Processo</h2>\n\n            <span>Este indicador informa o valor total dos honorários e o total de processos para cada situação financeira</span>\n          </div>\n        )\n      }\n\n      <Spin spinning={loading}>\n        <GraphContainer>\n          {situations.length === 0\n            ? (\n              <Empty description=\"Nenhum indicador encontrado\" />\n            ) : (\n              <Chart\n                height=\"100%\"\n                data={situations}\n                scale={cols}\n                padding=\"auto\"\n                appendPadding={[0, 180, 0, 0]}\n                autoFit\n              >\n                <Coord transpose />\n                <Axis name=\"description\" />\n                <Axis name=\"totalHonorary\" visible={false} />\n                <Tooltip>\n                  {(title, items) => <CustomTooltip title={title} items={items}/>}\n                </Tooltip>\n                <Geom\n                  color=\"description\"\n                  type=\"interval\"\n                  position=\"description*totalHonorary\"\n                  label={['totalHonorary*totalProcess', (value, process) => {\n                    return ({ content: `${currencyFormatter(value, { cents: true })} | Processos: ${process}` })\n                  }]}\n                >\n                </Geom>\n              </Chart>\n            )\n          }\n        </GraphContainer>\n      </Spin>\n    </>\n  )\n}\n\nexport default Situation\n\nconst GraphContainer = styled.div`\n  height: calc(100vh - 5rem - 65.5px - 60px);\n  margin-top: 20px;\n  border: 1px solid ${p => p.theme.colors.primary};\n  padding: 10px;\n`\n\ntype CustomTooltipProps = {\n  title?: string,\n  items?: any[],\n}\n\nconst CustomTooltip: React.FC<CustomTooltipProps> = ({ title, items }) => {\n  return (\n    <div style={{ padding: 10 }}>\n      <div>\n        {title}\n      </div>\n\n      {items?.map((item, index) => (\n        <div key={index}>\n          <TooltipItem $color={item.color}>\n            Processos: {item.data.totalProcess}\n          </TooltipItem>\n\n          <TooltipItem $color={item.color}>\n            Honorários: {currencyFormatter(item.data.totalHonorary, { cents: true })}\n          </TooltipItem>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nconst TooltipItem = styled.div<{ $color: string }>`\n  margin-top: 10px;\n\n  &::before {\n    content: '';\n    display: inline-block;\n    width: 7px;\n    height: 7px;\n    border-radius: 50%;\n    background-color: ${p => p.$color};\n    margin-right: 5px;\n  }\n`\n"]},"metadata":{},"sourceType":"module"}