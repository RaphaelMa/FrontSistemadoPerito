{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Components/NotificationIcon/NotificationIcon.tsx\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useState, useEffect, useRef, memo } from 'react';\nimport { Badge, Dropdown, message } from 'antd';\nimport { ReactComponent as NotificationSvg } from \"@svgr/webpack?-svgo,+titleProp,+ref!Assets/icons/notification.svg\";\nimport { useUserSelector } from 'Redux/UserReducer';\nimport Icon from '@ant-design/icons';\nimport NotificationList from './NotificationList';\nimport useHasNotification from './useHasNotification';\nimport useGetNotifications from './useGetNotifications';\nimport useReadNotification from './useReadNotification';\nimport messageError from 'Utils/messageError';\n\nconst NotificationIcon = () => {\n  var _has_notification_dat;\n\n  const [type, setType] = useState('geral');\n  const [visible, setVisible] = useState(false);\n  const [{\n    data: has_notification_data\n  }, hasNotification] = useHasNotification();\n  const [{\n    loading,\n    data\n  }, getNotifications] = useGetNotifications();\n  const [readNotification] = useReadNotification();\n  const {\n    trial,\n    toHire\n  } = useUserSelector(state => state.company) || {};\n  const trial_rest_days = useUserSelector(state => state.trial_rest_days);\n  const permissions = useUserSelector(state => state.permissions);\n  const fetchNotificationInterval = useRef(null);\n  const has_notification = (_has_notification_dat = has_notification_data === null || has_notification_data === void 0 ? void 0 : has_notification_data.notification) !== null && _has_notification_dat !== void 0 ? _has_notification_dat : false;\n\n  const fetchHasNotification = () => {\n    if (fetchNotificationInterval.current) clearInterval(fetchNotificationInterval.current);\n    fetchNotificationInterval.current = setInterval(hasNotification, 1 * 60 * 1000);\n  };\n\n  useEffect(() => {\n    if (toHire || trial && trial_rest_days > 0) {\n      setTimeout(hasNotification, 1000); // Tem o timeout para dar tempo de setar o token do axios\n\n      fetchHasNotification();\n    }\n\n    return () => {\n      if (fetchNotificationInterval.current) clearInterval(fetchNotificationInterval.current);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [toHire, trial, trial_rest_days]);\n  useEffect(() => {\n    if (visible && has_notification) getNotifications(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [visible, has_notification]);\n\n  const handleChangeType = (event, new_type) => {\n    event.preventDefault();\n    setType(new_type);\n  };\n\n  const handleReadNotification = async id => {\n    try {\n      const {\n        data\n      } = await readNotification(id);\n\n      if (data === null || data === void 0 ? void 0 : data.success) {\n        getNotifications();\n        hasNotification();\n        return;\n      } // Se não deu certo, é provavel que os próximos tbm irão falhar\n\n\n      if (fetchNotificationInterval.current) clearInterval(fetchNotificationInterval.current);\n      message.error('Não foi possível atualizar a notificação');\n    } catch (error) {\n      // Se não deu certo, é provavel que os próximos tbm irão falhar\n      if (fetchNotificationInterval.current) clearInterval(fetchNotificationInterval.current);\n      console.log(error);\n      messageError('202010121846');\n    }\n  };\n\n  const notifications = data || [];\n  const filtered_notifications = notifications.filter(notification => {\n    const movement_types = ['movement', 'key_word'];\n    if (type === 'movimentation' && movement_types.includes(notification.module.module_id)) return true;\n    return type === 'geral' && !movement_types.includes(notification.module.module_id);\n  });\n  const has_general_notification = notifications.some(notification => !notification.module.module_id);\n  const has_movimentation_notification = notifications.some(notification => notification.module.module_id);\n  return /*#__PURE__*/React.createElement(Dropdown, {\n    overlay: () => NotificationList({\n      handleChangeType,\n      handleReadNotification,\n      has_general_notification,\n      has_movimentation_notification,\n      loading,\n      notifications: filtered_notifications,\n      has_update_permission: permissions === null || permissions === void 0 ? void 0 : permissions.notification.update\n    }),\n    trigger: ['click'],\n    placement: \"bottomRight\",\n    visible: visible,\n    onVisibleChange: setVisible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Badge, {\n    offset: [-14, 7],\n    status: has_notification ? 'success' : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    component: NotificationSvg,\n    style: {\n      fontSize: '24px',\n      marginRight: '8px',\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  })));\n};\n\n__signature__(NotificationIcon, \"useState{[type, setType]('geral')}\\nuseState{[visible, setVisible](false)}\\nuseHasNotification{[{ data: has_notification_data }, hasNotification]}\\nuseGetNotifications{[{ loading, data }, getNotifications]}\\nuseReadNotification{[readNotification]}\\nuseUserSelector{}\\nuseUserSelector{trial_rest_days}\\nuseUserSelector{permissions}\\nuseRef{fetchNotificationInterval}\\nuseEffect{}\\nuseEffect{}\", () => [useHasNotification, useGetNotifications, useReadNotification, useUserSelector, useUserSelector, useUserSelector]);\n\nNotificationIcon.displayName = \"NotificationIcon\";\n\nconst _default = memo(NotificationIcon);\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(NotificationIcon, \"NotificationIcon\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Components/NotificationIcon/NotificationIcon.tsx\");\n  reactHotLoader.register(_default, \"default\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Components/NotificationIcon/NotificationIcon.tsx\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Components/NotificationIcon/NotificationIcon.tsx"],"names":["React","useState","useEffect","useRef","memo","Badge","Dropdown","message","useUserSelector","Icon","NotificationList","useHasNotification","useGetNotifications","useReadNotification","messageError","NotificationIcon","type","setType","visible","setVisible","data","has_notification_data","hasNotification","loading","getNotifications","readNotification","trial","toHire","state","company","trial_rest_days","permissions","fetchNotificationInterval","has_notification","notification","fetchHasNotification","current","clearInterval","setInterval","setTimeout","handleChangeType","event","new_type","preventDefault","handleReadNotification","id","success","error","console","log","notifications","filtered_notifications","filter","movement_types","includes","module","module_id","has_general_notification","some","has_movimentation_notification","has_update_permission","update","undefined","NotificationSvg","fontSize","marginRight","cursor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, memo } from 'react'\nimport { Badge, Dropdown, message } from 'antd'\nimport { ReactComponent as NotificationSvg } from 'Assets/icons/notification.svg'\nimport { useUserSelector } from 'Redux/UserReducer'\nimport Icon from '@ant-design/icons'\nimport NotificationList from './NotificationList'\nimport useHasNotification from './useHasNotification'\nimport useGetNotifications from './useGetNotifications'\nimport useReadNotification from './useReadNotification'\nimport messageError from 'Utils/messageError'\n\nconst NotificationIcon: React.FC = () => {\n  const [type, setType] = useState<'geral' | 'movimentation'>('geral')\n  const [visible, setVisible] = useState(false)\n  const [{ data: has_notification_data }, hasNotification] = useHasNotification()\n  const [{ loading, data }, getNotifications] = useGetNotifications()\n  const [readNotification] = useReadNotification()\n  const { trial, toHire } = useUserSelector(state => state.company) || {}\n  const trial_rest_days = useUserSelector(state => state.trial_rest_days)\n  const permissions = useUserSelector(state => state.permissions)\n\n  const fetchNotificationInterval = useRef<number | null>(null)\n\n  const has_notification = has_notification_data?.notification ?? false\n\n  const fetchHasNotification = () => {\n    if (fetchNotificationInterval.current) clearInterval(fetchNotificationInterval.current)\n\n    fetchNotificationInterval.current = setInterval(hasNotification, 1 * 60 * 1000)\n  }\n\n  useEffect(() => {\n    if (toHire || (trial && trial_rest_days > 0)) {\n      setTimeout(hasNotification, 1000) // Tem o timeout para dar tempo de setar o token do axios\n      fetchHasNotification()\n    }\n\n    return () => {\n      if (fetchNotificationInterval.current) clearInterval(fetchNotificationInterval.current)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [toHire, trial, trial_rest_days])\n\n  useEffect(() => {\n    if (visible && has_notification) getNotifications()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [visible, has_notification])\n\n  const handleChangeType = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, new_type: 'geral' | 'movimentation') => {\n    event.preventDefault()\n\n    setType(new_type)\n  }\n\n  const handleReadNotification = async (id: string) => {\n    try {\n      const { data } = await readNotification(id)\n      if (data?.success) {\n        getNotifications()\n        hasNotification()\n        return\n      }\n\n      // Se não deu certo, é provavel que os próximos tbm irão falhar\n      if (fetchNotificationInterval.current) clearInterval(fetchNotificationInterval.current)\n      message.error('Não foi possível atualizar a notificação')\n    } catch (error) {\n      // Se não deu certo, é provavel que os próximos tbm irão falhar\n      if (fetchNotificationInterval.current) clearInterval(fetchNotificationInterval.current)\n\n      console.log(error)\n      messageError('202010121846')\n    }\n  }\n\n  const notifications = data || []\n  const filtered_notifications = notifications.filter(notification => {\n    const movement_types = ['movement', 'key_word']\n\n    if (type === 'movimentation' && movement_types.includes(notification.module.module_id)) return true\n    return type === 'geral' && !movement_types.includes(notification.module.module_id)\n  })\n\n  const has_general_notification = notifications.some(notification => !notification.module.module_id)\n  const has_movimentation_notification = notifications.some(notification => notification.module.module_id)\n\n  return (\n    <Dropdown\n      overlay={() => NotificationList({\n        handleChangeType,\n        handleReadNotification,\n        has_general_notification,\n        has_movimentation_notification,\n        loading,\n        notifications: filtered_notifications,\n        has_update_permission: permissions?.notification.update\n      })}\n      trigger={['click']}\n      placement=\"bottomRight\"\n      visible={visible}\n      onVisibleChange={setVisible}\n    >\n      <Badge\n        offset={[-14, 7]}\n        status={has_notification ? 'success' : undefined}\n      >\n        <Icon\n          component={NotificationSvg}\n          style={{ fontSize: '24px', marginRight: '8px', cursor: 'pointer' }}\n        />\n      </Badge>\n    </Dropdown>\n  )\n}\n\nexport default memo(NotificationIcon)\n"]},"metadata":{},"sourceType":"module"}