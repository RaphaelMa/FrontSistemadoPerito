{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\n/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nexport default function createGetCssVar(prefix = '') {\n  function appendVar(...vars) {\n    if (!vars.length) {\n      return '';\n    }\n\n    const value = vars[0];\n\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)) {\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\n    }\n\n    return `, ${value}`;\n  } // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n\n\n  const getCssVar = (field, ...vars) => {\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...vars)})`;\n  };\n\n  return getCssVar;\n}\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(createGetCssVar, \"createGetCssVar\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/@mui/system/esm/cssVars/createGetCssVar.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/@mui/system/esm/cssVars/createGetCssVar.js"],"names":["createGetCssVar","prefix","appendVar","vars","length","value","match","slice","getCssVar","field"],"mappings":";;;;;;;;;AAAA;;;;AAIA,eAAe,SAASA,eAAT,CAAyBC,MAAM,GAAG,EAAlC,EAAsC;AACnD,WAASC,SAAT,CAAmB,GAAGC,IAAtB,EAA4B;AAC1B,QAAI,CAACA,IAAI,CAACC,MAAV,EAAkB;AAChB,aAAO,EAAP;AACD;;AAED,UAAMC,KAAK,GAAGF,IAAI,CAAC,CAAD,CAAlB;;AAEA,QAAI,OAAOE,KAAP,KAAiB,QAAjB,IAA6B,CAACA,KAAK,CAACC,KAAN,CAAY,6EAAZ,CAAlC,EAA8H;AAC5H,aAAQ,WAAUL,MAAM,GAAI,GAAEA,MAAO,GAAb,GAAkB,EAAG,GAAEI,KAAM,GAAEH,SAAS,CAAC,GAAGC,IAAI,CAACI,KAAL,CAAW,CAAX,CAAJ,CAAmB,GAAnF;AACD;;AAED,WAAQ,KAAIF,KAAM,EAAlB;AACD,GAbkD,CAajD;;;AAGF,QAAMG,SAAS,GAAG,CAACC,KAAD,EAAQ,GAAGN,IAAX,KAAoB;AACpC,WAAQ,SAAQF,MAAM,GAAI,GAAEA,MAAO,GAAb,GAAkB,EAAG,GAAEQ,KAAM,GAAEP,SAAS,CAAC,GAAGC,IAAJ,CAAU,GAAxE;AACD,GAFD;;AAIA,SAAOK,SAAP;AACD;;;;;;;;;;0BArBuBR,e","sourcesContent":["/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nexport default function createGetCssVar(prefix = '') {\n  function appendVar(...vars) {\n    if (!vars.length) {\n      return '';\n    }\n\n    const value = vars[0];\n\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)) {\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\n    }\n\n    return `, ${value}`;\n  } // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n\n\n  const getCssVar = (field, ...vars) => {\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...vars)})`;\n  };\n\n  return getCssVar;\n}"]},"metadata":{},"sourceType":"module"}