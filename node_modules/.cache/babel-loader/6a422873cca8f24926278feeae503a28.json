{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport * as React from 'react';\nexport default function useMemo(getValue, condition, shouldUpdate) {\n  var cacheRef = React.useRef({});\n\n  if (!('value' in cacheRef.current) || shouldUpdate(cacheRef.current.condition, condition)) {\n    cacheRef.current.value = getValue();\n    cacheRef.current.condition = condition;\n  }\n\n  return cacheRef.current.value;\n}\n\n__signature__(useMemo, \"useRef{cacheRef}\");\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(useMemo, \"useMemo\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/rc-util/es/hooks/useMemo.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/rc-util/es/hooks/useMemo.js"],"names":["React","useMemo","getValue","condition","shouldUpdate","cacheRef","useRef","current","value"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,eAAe,SAASC,OAAT,CAAiBC,QAAjB,EAA2BC,SAA3B,EAAsCC,YAAtC,EAAoD;AACjE,MAAIC,QAAQ,GAAGL,KAAK,CAACM,MAAN,CAAa,EAAb,CAAf;;AAEA,MAAI,EAAE,WAAWD,QAAQ,CAACE,OAAtB,KAAkCH,YAAY,CAACC,QAAQ,CAACE,OAAT,CAAiBJ,SAAlB,EAA6BA,SAA7B,CAAlD,EAA2F;AACzFE,IAAAA,QAAQ,CAACE,OAAT,CAAiBC,KAAjB,GAAyBN,QAAQ,EAAjC;AACAG,IAAAA,QAAQ,CAACE,OAAT,CAAiBJ,SAAjB,GAA6BA,SAA7B;AACD;;AAED,SAAOE,QAAQ,CAACE,OAAT,CAAiBC,KAAxB;AACD;;cATuBP,O;;;;;;;;;;;0BAAAA,O","sourcesContent":["import * as React from 'react';\nexport default function useMemo(getValue, condition, shouldUpdate) {\n  var cacheRef = React.useRef({});\n\n  if (!('value' in cacheRef.current) || shouldUpdate(cacheRef.current.condition, condition)) {\n    cacheRef.current.value = getValue();\n    cacheRef.current.condition = condition;\n  }\n\n  return cacheRef.current.value;\n}"]},"metadata":{},"sourceType":"module"}