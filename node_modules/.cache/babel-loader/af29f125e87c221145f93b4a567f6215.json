{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/NewProcess/Tabs/ProcessTasks/useColumns.tsx\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useMemo } from 'react';\nimport DateTag from 'Pages/Tasks/Kanban/Task/DateTag';\nimport { Popconfirm, Button, Switch, Tooltip } from 'antd';\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\nimport { theme } from '../../../../Styles/theme';\nimport styled from 'styled-components';\n\nconst useColumns = handleAction => {\n  return useMemo(() => {\n    const columns = [{\n      title: 'Coluna',\n      dataIndex: 'column_description',\n      key: 'column_description',\n      ellipsis: true\n    }, {\n      title: 'Título',\n      dataIndex: 'title',\n      key: 'title',\n      ellipsis: true\n    }, {\n      title: 'Responsável',\n      dataIndex: 'user_name',\n      key: 'user_name',\n      width: 250,\n      ellipsis: true\n    }, {\n      title: 'Processo',\n      dataIndex: 'process_number',\n      key: 'process_number',\n      align: 'center',\n      width: 250,\n      ellipsis: true\n    }, {\n      title: 'Data Entrega',\n      dataIndex: 'deliveryDate',\n      key: 'deliveryDate',\n      align: 'center',\n      width: 110,\n      render: (_, task) => /*#__PURE__*/React.createElement(DateTag // @ts-ignore\n      , {\n        task: { ...task,\n          column_id: task.column_description,\n          deliveryDate: task.deliveryDate\n        },\n        date_format: \"DD/MM/YYYY\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }\n      })\n    }, {\n      title: 'Finalizado',\n      dataIndex: 'finished',\n      key: 'finished',\n      align: 'center',\n      width: 85,\n      render: finished => finished ? 'Sim' : 'Não'\n    }, {\n      title: 'Ações',\n      align: 'center',\n      width: 140,\n      render: (_, task) => /*#__PURE__*/React.createElement(ActionsContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Popconfirm, {\n        title: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 19\n          }\n        }, \"A tarefa ser\\xE1 exclu\\xEDda\"), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 19\n          }\n        }, \"Deseja continuar?\")),\n        okText: \"Sim\",\n        cancelText: \"N\\xE3o\",\n        okType: \"danger\",\n        placement: \"topLeft\",\n        onConfirm: () => handleAction('destroy', task),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: \"text\",\n        icon: /*#__PURE__*/React.createElement(DeleteOutlined, {\n          style: {\n            color: theme.colors.red\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 23\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        type: \"text\",\n        icon: /*#__PURE__*/React.createElement(EditOutlined, {\n          style: {\n            color: theme.colors.primary\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }\n        }),\n        onClick: () => handleAction('edit', task),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Tooltip, {\n        title: `Marcar como ${task.finished ? 'não' : ''} concluído`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        onChange: () => handleAction('action', task),\n        style: {\n          marginLeft: 5\n        },\n        size: \"small\",\n        checked: task.finished,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }\n      })))\n    }];\n    return columns;\n  }, [handleAction]);\n};\n\n__signature__(useColumns, \"useMemo{}\");\n\nconst _default = useColumns;\nexport default _default;\nconst ActionsContainer = styled.div.withConfig({\n  displayName: \"useColumns__ActionsContainer\",\n  componentId: \"csfkmq-0\"\n})([\"display:block;justify-content:space-between;\"]);\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(useColumns, \"useColumns\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/NewProcess/Tabs/ProcessTasks/useColumns.tsx\");\n  reactHotLoader.register(ActionsContainer, \"ActionsContainer\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/NewProcess/Tabs/ProcessTasks/useColumns.tsx\");\n  reactHotLoader.register(_default, \"default\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/NewProcess/Tabs/ProcessTasks/useColumns.tsx\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/src/Pages/NewProcess/Tabs/ProcessTasks/useColumns.tsx"],"names":["React","useMemo","DateTag","Popconfirm","Button","Switch","Tooltip","DeleteOutlined","EditOutlined","theme","styled","useColumns","handleAction","columns","title","dataIndex","key","ellipsis","width","align","render","_","task","column_id","column_description","deliveryDate","finished","color","colors","red","primary","marginLeft","ActionsContainer","div"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\nimport { ColumnsType } from 'antd/es/table'\nimport { TaskType } from './useGetProcessTasks'\nimport DateTag from 'Pages/Tasks/Kanban/Task/DateTag'\nimport { Popconfirm, Button, Switch, Tooltip } from 'antd'\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\nimport { theme } from '../../../../Styles/theme'\nimport styled from 'styled-components'\n\nconst useColumns = (handleAction: (actions: 'destroy' | 'edit' | 'action', task: TaskType) => void) => {\n  return useMemo(() => {\n    const columns: ColumnsType<TaskType> = [\n      {\n        title: 'Coluna',\n        dataIndex: 'column_description',\n        key: 'column_description',\n        ellipsis: true\n      },\n      {\n        title: 'Título',\n        dataIndex: 'title',\n        key: 'title',\n        ellipsis: true\n      },\n      {\n        title: 'Responsável',\n        dataIndex: 'user_name',\n        key: 'user_name',\n        width: 250,\n        ellipsis: true\n      },\n      {\n        title: 'Processo',\n        dataIndex: 'process_number',\n        key: 'process_number',\n        align: 'center',\n        width: 250,\n        ellipsis: true\n      },\n      {\n        title: 'Data Entrega',\n        dataIndex: 'deliveryDate',\n        key: 'deliveryDate',\n        align: 'center',\n        width: 110,\n        render: (_: string, task) => (\n          <DateTag\n            // @ts-ignore\n            task={{ ...task, column_id: task.column_description, deliveryDate: task.deliveryDate }}\n            date_format=\"DD/MM/YYYY\"\n          />\n        )\n      },\n      {\n        title: 'Finalizado',\n        dataIndex: 'finished',\n        key: 'finished',\n        align: 'center',\n        width: 85,\n        render: (finished) => finished ? 'Sim' : 'Não'\n      },\n      {\n        title: 'Ações',\n        align: 'center',\n        width: 140,\n        render: (_, task) => (\n          <ActionsContainer>\n            <Popconfirm\n              title={\n                <>\n                  <div>A tarefa será excluída</div>\n                  <div>Deseja continuar?</div>\n                </>\n              }\n              okText=\"Sim\"\n              cancelText=\"Não\"\n              okType=\"danger\"\n              placement=\"topLeft\"\n              onConfirm={() => handleAction('destroy', task)}\n            >\n              <Button\n                type=\"text\"\n                icon={<DeleteOutlined style={{ color: theme.colors.red }}/>}\n              />\n            </Popconfirm>\n\n            <Button\n              type=\"text\"\n              icon={<EditOutlined style={{ color: theme.colors.primary }}/>}\n              onClick={() => handleAction('edit', task)}\n            />\n\n            <Tooltip title={`Marcar como ${task.finished ? 'não' : ''} concluído`}>\n              <Switch\n                onChange={() => handleAction('action', task)}\n                style={{ marginLeft: 5 }}\n                size=\"small\"\n                checked={task.finished}\n              />\n            </Tooltip>\n          </ActionsContainer>\n        )\n      }\n    ]\n\n    return columns\n  }, [handleAction])\n}\n\nexport default useColumns\n\nconst ActionsContainer = styled.div`\n  display: block;\n  justify-content: space-between;\n`\n"]},"metadata":{},"sourceType":"module"}