{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { useMemo } from 'react';\n/**\n * Get sticky column offset width\n */\n\nfunction useStickyOffsets(colWidths, columCount, direction) {\n  var stickyOffsets = useMemo(function () {\n    var leftOffsets = [];\n    var rightOffsets = [];\n    var left = 0;\n    var right = 0;\n\n    for (var start = 0; start < columCount; start += 1) {\n      if (direction === 'rtl') {\n        // Left offset\n        rightOffsets[start] = right;\n        right += colWidths[start] || 0; // Right offset\n\n        var end = columCount - start - 1;\n        leftOffsets[end] = left;\n        left += colWidths[end] || 0;\n      } else {\n        // Left offset\n        leftOffsets[start] = left;\n        left += colWidths[start] || 0; // Right offset\n\n        var _end = columCount - start - 1;\n\n        rightOffsets[_end] = right;\n        right += colWidths[_end] || 0;\n      }\n    }\n\n    return {\n      left: leftOffsets,\n      right: rightOffsets\n    };\n  }, [colWidths, columCount, direction]);\n  return stickyOffsets;\n}\n\n__signature__(useStickyOffsets, \"useMemo{stickyOffsets}\");\n\nconst _default = useStickyOffsets;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(useStickyOffsets, \"useStickyOffsets\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/rc-table/es/hooks/useStickyOffsets.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/rc-table/es/hooks/useStickyOffsets.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/raphael/Documents/Github/FrontSistemadoPerito/node_modules/rc-table/es/hooks/useStickyOffsets.js"],"names":["useMemo","useStickyOffsets","colWidths","columCount","direction","stickyOffsets","leftOffsets","rightOffsets","left","right","start","end","_end"],"mappings":";;;;;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA;;;;AAIA,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,SAAjD,EAA4D;AAC1D,MAAIC,aAAa,GAAGL,OAAO,CAAC,YAAY;AACtC,QAAIM,WAAW,GAAG,EAAlB;AACA,QAAIC,YAAY,GAAG,EAAnB;AACA,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIC,KAAK,GAAG,CAAZ;;AAEA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,UAA5B,EAAwCO,KAAK,IAAI,CAAjD,EAAoD;AAClD,UAAIN,SAAS,KAAK,KAAlB,EAAyB;AACvB;AACAG,QAAAA,YAAY,CAACG,KAAD,CAAZ,GAAsBD,KAAtB;AACAA,QAAAA,KAAK,IAAIP,SAAS,CAACQ,KAAD,CAAT,IAAoB,CAA7B,CAHuB,CAGS;;AAEhC,YAAIC,GAAG,GAAGR,UAAU,GAAGO,KAAb,GAAqB,CAA/B;AACAJ,QAAAA,WAAW,CAACK,GAAD,CAAX,GAAmBH,IAAnB;AACAA,QAAAA,IAAI,IAAIN,SAAS,CAACS,GAAD,CAAT,IAAkB,CAA1B;AACD,OARD,MAQO;AACL;AACAL,QAAAA,WAAW,CAACI,KAAD,CAAX,GAAqBF,IAArB;AACAA,QAAAA,IAAI,IAAIN,SAAS,CAACQ,KAAD,CAAT,IAAoB,CAA5B,CAHK,CAG0B;;AAE/B,YAAIE,IAAI,GAAGT,UAAU,GAAGO,KAAb,GAAqB,CAAhC;;AAEAH,QAAAA,YAAY,CAACK,IAAD,CAAZ,GAAqBH,KAArB;AACAA,QAAAA,KAAK,IAAIP,SAAS,CAACU,IAAD,CAAT,IAAmB,CAA5B;AACD;AACF;;AAED,WAAO;AACLJ,MAAAA,IAAI,EAAEF,WADD;AAELG,MAAAA,KAAK,EAAEF;AAFF,KAAP;AAID,GA/B0B,EA+BxB,CAACL,SAAD,EAAYC,UAAZ,EAAwBC,SAAxB,CA/BwB,CAA3B;AAgCA,SAAOC,aAAP;AACD;;cAlCQJ,gB;;iBAoCMA,gB;AAAf;;;;;;;;;;0BApCSA,gB","sourcesContent":["import { useMemo } from 'react';\n/**\n * Get sticky column offset width\n */\n\nfunction useStickyOffsets(colWidths, columCount, direction) {\n  var stickyOffsets = useMemo(function () {\n    var leftOffsets = [];\n    var rightOffsets = [];\n    var left = 0;\n    var right = 0;\n\n    for (var start = 0; start < columCount; start += 1) {\n      if (direction === 'rtl') {\n        // Left offset\n        rightOffsets[start] = right;\n        right += colWidths[start] || 0; // Right offset\n\n        var end = columCount - start - 1;\n        leftOffsets[end] = left;\n        left += colWidths[end] || 0;\n      } else {\n        // Left offset\n        leftOffsets[start] = left;\n        left += colWidths[start] || 0; // Right offset\n\n        var _end = columCount - start - 1;\n\n        rightOffsets[_end] = right;\n        right += colWidths[_end] || 0;\n      }\n    }\n\n    return {\n      left: leftOffsets,\n      right: rightOffsets\n    };\n  }, [colWidths, columCount, direction]);\n  return stickyOffsets;\n}\n\nexport default useStickyOffsets;"]},"metadata":{},"sourceType":"module"}